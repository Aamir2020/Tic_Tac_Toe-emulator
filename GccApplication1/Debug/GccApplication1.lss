
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  0000264a  000026de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000264a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  008001d2  008001d2  000027b0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000027b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000280c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  0000284c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b5e  00000000  00000000  000029bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9d  00000000  00000000  0000751a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018a4  00000000  00000000  000082b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  00009b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ae  00000000  00000000  0000a110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002da9  00000000  00000000  0000a8be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000d667  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 02 	jmp	0x564	; 0x564 <__ctors_end>
       4:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
       8:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
       c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      10:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      14:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      18:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      1c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      20:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      24:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      28:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      2c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      30:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      34:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      38:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      3c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      40:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      44:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      48:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      4c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      50:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      54:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      58:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      5c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      60:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      64:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 3e       	cpi	r16, 0xE0	; 224
      6e:	5b 4f       	sbci	r21, 0xFB	; 251
      70:	5b 3e       	cpi	r21, 0xEB	; 235
      72:	3e 6b       	ori	r19, 0xBE	; 190
      74:	4f 6b       	ori	r20, 0xBF	; 191
      76:	3e 1c       	adc	r3, r14
      78:	3e 7c       	andi	r19, 0xCE	; 206
      7a:	3e 1c       	adc	r3, r14
      7c:	18 3c       	cpi	r17, 0xC8	; 200
      7e:	7e 3c       	cpi	r23, 0xCE	; 206
      80:	18 1c       	adc	r1, r8
      82:	57 7d       	andi	r21, 0xD7	; 215
      84:	57 1c       	adc	r5, r7
      86:	1c 5e       	subi	r17, 0xEC	; 236
      88:	7f 5e       	subi	r23, 0xEF	; 239
      8a:	1c 00       	.word	0x001c	; ????
      8c:	18 3c       	cpi	r17, 0xC8	; 200
      8e:	18 00       	.word	0x0018	; ????
      90:	ff e7       	ldi	r31, 0x7F	; 127
      92:	c3 e7       	ldi	r28, 0x73	; 115
      94:	ff 00       	.word	0x00ff	; ????
      96:	18 24       	eor	r1, r8
      98:	18 00       	.word	0x0018	; ????
      9a:	ff e7       	ldi	r31, 0x7F	; 127
      9c:	db e7       	ldi	r29, 0x7B	; 123
      9e:	ff 30       	cpi	r31, 0x0F	; 15
      a0:	48 3a       	cpi	r20, 0xA8	; 168
      a2:	06 0e       	add	r0, r22
      a4:	26 29       	or	r18, r6
      a6:	79 29       	or	r23, r9
      a8:	26 40       	sbci	r18, 0x06	; 6
      aa:	7f 05       	cpc	r23, r15
      ac:	05 07       	cpc	r16, r21
      ae:	40 7f       	andi	r20, 0xF0	; 240
      b0:	05 25       	eor	r16, r5
      b2:	3f 5a       	subi	r19, 0xAF	; 175
      b4:	3c e7       	ldi	r19, 0x7C	; 124
      b6:	3c 5a       	subi	r19, 0xAC	; 172
      b8:	7f 3e       	cpi	r23, 0xEF	; 239
      ba:	1c 1c       	adc	r1, r12
      bc:	08 08       	sbc	r0, r8
      be:	1c 1c       	adc	r1, r12
      c0:	3e 7f       	andi	r19, 0xFE	; 254
      c2:	14 22       	and	r1, r20
      c4:	7f 22       	and	r7, r31
      c6:	14 5f       	subi	r17, 0xF4	; 244
      c8:	5f 00       	.word	0x005f	; ????
      ca:	5f 5f       	subi	r21, 0xFF	; 255
      cc:	06 09       	sbc	r16, r6
      ce:	7f 01       	movw	r14, r30
      d0:	7f 00       	.word	0x007f	; ????
      d2:	66 89       	ldd	r22, Z+22	; 0x16
      d4:	95 6a       	ori	r25, 0xA5	; 165
      d6:	60 60       	ori	r22, 0x00	; 0
      d8:	60 60       	ori	r22, 0x00	; 0
      da:	60 94       	com	r6
      dc:	a2 ff       	sbrs	r26, 2
      de:	a2 94       	swap	r10
      e0:	08 04       	cpc	r0, r8
      e2:	7e 04       	cpc	r7, r14
      e4:	08 10       	cpse	r0, r8
      e6:	20 7e       	andi	r18, 0xE0	; 224
      e8:	20 10       	cpse	r2, r0
      ea:	08 08       	sbc	r0, r8
      ec:	2a 1c       	adc	r2, r10
      ee:	08 08       	sbc	r0, r8
      f0:	1c 2a       	or	r1, r28
      f2:	08 08       	sbc	r0, r8
      f4:	1e 10       	cpse	r1, r14
      f6:	10 10       	cpse	r1, r0
      f8:	10 0c       	add	r1, r0
      fa:	1e 0c       	add	r1, r14
      fc:	1e 0c       	add	r1, r14
      fe:	30 38       	cpi	r19, 0x80	; 128
     100:	3e 38       	cpi	r19, 0x8E	; 142
     102:	30 06       	cpc	r3, r16
     104:	0e 3e       	cpi	r16, 0xEE	; 238
     106:	0e 06       	cpc	r0, r30
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	00 5f       	subi	r16, 0xF0	; 240
     110:	00 00       	nop
     112:	00 07       	cpc	r16, r16
     114:	00 07       	cpc	r16, r16
     116:	00 14       	cp	r0, r0
     118:	7f 14       	cp	r7, r15
     11a:	7f 14       	cp	r7, r15
     11c:	24 2a       	or	r2, r20
     11e:	7f 2a       	or	r7, r31
     120:	12 23       	and	r17, r18
     122:	13 08       	sbc	r1, r3
     124:	64 62       	ori	r22, 0x24	; 36
     126:	36 49       	sbci	r19, 0x96	; 150
     128:	56 20       	and	r5, r6
     12a:	50 00       	.word	0x0050	; ????
     12c:	08 07       	cpc	r16, r24
     12e:	03 00       	.word	0x0003	; ????
     130:	00 1c       	adc	r0, r0
     132:	22 41       	sbci	r18, 0x12	; 18
     134:	00 00       	nop
     136:	41 22       	and	r4, r17
     138:	1c 00       	.word	0x001c	; ????
     13a:	2a 1c       	adc	r2, r10
     13c:	7f 1c       	adc	r7, r15
     13e:	2a 08       	sbc	r2, r10
     140:	08 3e       	cpi	r16, 0xE8	; 232
     142:	08 08       	sbc	r0, r8
     144:	00 80       	ld	r0, Z
     146:	70 30       	cpi	r23, 0x00	; 0
     148:	00 08       	sbc	r0, r0
     14a:	08 08       	sbc	r0, r8
     14c:	08 08       	sbc	r0, r8
     14e:	00 00       	nop
     150:	60 60       	ori	r22, 0x00	; 0
     152:	00 20       	and	r0, r0
     154:	10 08       	sbc	r1, r0
     156:	04 02       	muls	r16, r20
     158:	3e 51       	subi	r19, 0x1E	; 30
     15a:	49 45       	sbci	r20, 0x59	; 89
     15c:	3e 00       	.word	0x003e	; ????
     15e:	42 7f       	andi	r20, 0xF2	; 242
     160:	40 00       	.word	0x0040	; ????
     162:	72 49       	sbci	r23, 0x92	; 146
     164:	49 49       	sbci	r20, 0x99	; 153
     166:	46 21       	and	r20, r6
     168:	41 49       	sbci	r20, 0x91	; 145
     16a:	4d 33       	cpi	r20, 0x3D	; 61
     16c:	18 14       	cp	r1, r8
     16e:	12 7f       	andi	r17, 0xF2	; 242
     170:	10 27       	eor	r17, r16
     172:	45 45       	sbci	r20, 0x55	; 85
     174:	45 39       	cpi	r20, 0x95	; 149
     176:	3c 4a       	sbci	r19, 0xAC	; 172
     178:	49 49       	sbci	r20, 0x99	; 153
     17a:	31 41       	sbci	r19, 0x11	; 17
     17c:	21 11       	cpse	r18, r1
     17e:	09 07       	cpc	r16, r25
     180:	36 49       	sbci	r19, 0x96	; 150
     182:	49 49       	sbci	r20, 0x99	; 153
     184:	36 46       	sbci	r19, 0x66	; 102
     186:	49 49       	sbci	r20, 0x99	; 153
     188:	29 1e       	adc	r2, r25
     18a:	00 00       	nop
     18c:	14 00       	.word	0x0014	; ????
     18e:	00 00       	nop
     190:	40 34       	cpi	r20, 0x40	; 64
     192:	00 00       	nop
     194:	00 08       	sbc	r0, r0
     196:	14 22       	and	r1, r20
     198:	41 14       	cp	r4, r1
     19a:	14 14       	cp	r1, r4
     19c:	14 14       	cp	r1, r4
     19e:	00 41       	sbci	r16, 0x10	; 16
     1a0:	22 14       	cp	r2, r2
     1a2:	08 02       	muls	r16, r24
     1a4:	01 59       	subi	r16, 0x91	; 145
     1a6:	09 06       	cpc	r0, r25
     1a8:	3e 41       	sbci	r19, 0x1E	; 30
     1aa:	5d 59       	subi	r21, 0x9D	; 157
     1ac:	4e 7c       	andi	r20, 0xCE	; 206
     1ae:	12 11       	cpse	r17, r2
     1b0:	12 7c       	andi	r17, 0xC2	; 194
     1b2:	7f 49       	sbci	r23, 0x9F	; 159
     1b4:	49 49       	sbci	r20, 0x99	; 153
     1b6:	36 3e       	cpi	r19, 0xE6	; 230
     1b8:	41 41       	sbci	r20, 0x11	; 17
     1ba:	41 22       	and	r4, r17
     1bc:	7f 41       	sbci	r23, 0x1F	; 31
     1be:	41 41       	sbci	r20, 0x11	; 17
     1c0:	3e 7f       	andi	r19, 0xFE	; 254
     1c2:	49 49       	sbci	r20, 0x99	; 153
     1c4:	49 41       	sbci	r20, 0x19	; 25
     1c6:	7f 09       	sbc	r23, r15
     1c8:	09 09       	sbc	r16, r9
     1ca:	01 3e       	cpi	r16, 0xE1	; 225
     1cc:	41 41       	sbci	r20, 0x11	; 17
     1ce:	51 73       	andi	r21, 0x31	; 49
     1d0:	7f 08       	sbc	r7, r15
     1d2:	08 08       	sbc	r0, r8
     1d4:	7f 00       	.word	0x007f	; ????
     1d6:	41 7f       	andi	r20, 0xF1	; 241
     1d8:	41 00       	.word	0x0041	; ????
     1da:	20 40       	sbci	r18, 0x00	; 0
     1dc:	41 3f       	cpi	r20, 0xF1	; 241
     1de:	01 7f       	andi	r16, 0xF1	; 241
     1e0:	08 14       	cp	r0, r8
     1e2:	22 41       	sbci	r18, 0x12	; 18
     1e4:	7f 40       	sbci	r23, 0x0F	; 15
     1e6:	40 40       	sbci	r20, 0x00	; 0
     1e8:	40 7f       	andi	r20, 0xF0	; 240
     1ea:	02 1c       	adc	r0, r2
     1ec:	02 7f       	andi	r16, 0xF2	; 242
     1ee:	7f 04       	cpc	r7, r15
     1f0:	08 10       	cpse	r0, r8
     1f2:	7f 3e       	cpi	r23, 0xEF	; 239
     1f4:	41 41       	sbci	r20, 0x11	; 17
     1f6:	41 3e       	cpi	r20, 0xE1	; 225
     1f8:	7f 09       	sbc	r23, r15
     1fa:	09 09       	sbc	r16, r9
     1fc:	06 3e       	cpi	r16, 0xE6	; 230
     1fe:	41 51       	subi	r20, 0x11	; 17
     200:	21 5e       	subi	r18, 0xE1	; 225
     202:	7f 09       	sbc	r23, r15
     204:	19 29       	or	r17, r9
     206:	46 26       	eor	r4, r22
     208:	49 49       	sbci	r20, 0x99	; 153
     20a:	49 32       	cpi	r20, 0x29	; 41
     20c:	03 01       	movw	r0, r6
     20e:	7f 01       	movw	r14, r30
     210:	03 3f       	cpi	r16, 0xF3	; 243
     212:	40 40       	sbci	r20, 0x00	; 0
     214:	40 3f       	cpi	r20, 0xF0	; 240
     216:	1f 20       	and	r1, r15
     218:	40 20       	and	r4, r0
     21a:	1f 3f       	cpi	r17, 0xFF	; 255
     21c:	40 38       	cpi	r20, 0x80	; 128
     21e:	40 3f       	cpi	r20, 0xF0	; 240
     220:	63 14       	cp	r6, r3
     222:	08 14       	cp	r0, r8
     224:	63 03       	mulsu	r22, r19
     226:	04 78       	andi	r16, 0x84	; 132
     228:	04 03       	mulsu	r16, r20
     22a:	61 59       	subi	r22, 0x91	; 145
     22c:	49 4d       	sbci	r20, 0xD9	; 217
     22e:	43 00       	.word	0x0043	; ????
     230:	7f 41       	sbci	r23, 0x1F	; 31
     232:	41 41       	sbci	r20, 0x11	; 17
     234:	02 04       	cpc	r0, r2
     236:	08 10       	cpse	r0, r8
     238:	20 00       	.word	0x0020	; ????
     23a:	41 41       	sbci	r20, 0x11	; 17
     23c:	41 7f       	andi	r20, 0xF1	; 241
     23e:	04 02       	muls	r16, r20
     240:	01 02       	muls	r16, r17
     242:	04 40       	sbci	r16, 0x04	; 4
     244:	40 40       	sbci	r20, 0x00	; 0
     246:	40 40       	sbci	r20, 0x00	; 0
     248:	00 03       	mulsu	r16, r16
     24a:	07 08       	sbc	r0, r7
     24c:	00 20       	and	r0, r0
     24e:	54 54       	subi	r21, 0x44	; 68
     250:	78 40       	sbci	r23, 0x08	; 8
     252:	7f 28       	or	r7, r15
     254:	44 44       	sbci	r20, 0x44	; 68
     256:	38 38       	cpi	r19, 0x88	; 136
     258:	44 44       	sbci	r20, 0x44	; 68
     25a:	44 28       	or	r4, r4
     25c:	38 44       	sbci	r19, 0x48	; 72
     25e:	44 28       	or	r4, r4
     260:	7f 38       	cpi	r23, 0x8F	; 143
     262:	54 54       	subi	r21, 0x44	; 68
     264:	54 18       	sub	r5, r4
     266:	00 08       	sbc	r0, r0
     268:	7e 09       	sbc	r23, r14
     26a:	02 18       	sub	r0, r2
     26c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     26e:	9c 78       	andi	r25, 0x8C	; 140
     270:	7f 08       	sbc	r7, r15
     272:	04 04       	cpc	r0, r4
     274:	78 00       	.word	0x0078	; ????
     276:	44 7d       	andi	r20, 0xD4	; 212
     278:	40 00       	.word	0x0040	; ????
     27a:	20 40       	sbci	r18, 0x00	; 0
     27c:	40 3d       	cpi	r20, 0xD0	; 208
     27e:	00 7f       	andi	r16, 0xF0	; 240
     280:	10 28       	or	r1, r0
     282:	44 00       	.word	0x0044	; ????
     284:	00 41       	sbci	r16, 0x10	; 16
     286:	7f 40       	sbci	r23, 0x0F	; 15
     288:	00 7c       	andi	r16, 0xC0	; 192
     28a:	04 78       	andi	r16, 0x84	; 132
     28c:	04 78       	andi	r16, 0x84	; 132
     28e:	7c 08       	sbc	r7, r12
     290:	04 04       	cpc	r0, r4
     292:	78 38       	cpi	r23, 0x88	; 136
     294:	44 44       	sbci	r20, 0x44	; 68
     296:	44 38       	cpi	r20, 0x84	; 132
     298:	fc 18       	sub	r15, r12
     29a:	24 24       	eor	r2, r4
     29c:	18 18       	sub	r1, r8
     29e:	24 24       	eor	r2, r4
     2a0:	18 fc       	.word	0xfc18	; ????
     2a2:	7c 08       	sbc	r7, r12
     2a4:	04 04       	cpc	r0, r4
     2a6:	08 48       	sbci	r16, 0x88	; 136
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	54 24       	eor	r5, r4
     2ac:	04 04       	cpc	r0, r4
     2ae:	3f 44       	sbci	r19, 0x4F	; 79
     2b0:	24 3c       	cpi	r18, 0xC4	; 196
     2b2:	40 40       	sbci	r20, 0x00	; 0
     2b4:	20 7c       	andi	r18, 0xC0	; 192
     2b6:	1c 20       	and	r1, r12
     2b8:	40 20       	and	r4, r0
     2ba:	1c 3c       	cpi	r17, 0xCC	; 204
     2bc:	40 30       	cpi	r20, 0x00	; 0
     2be:	40 3c       	cpi	r20, 0xC0	; 192
     2c0:	44 28       	or	r4, r4
     2c2:	10 28       	or	r1, r0
     2c4:	44 4c       	sbci	r20, 0xC4	; 196
     2c6:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x7a9f>
     2ca:	44 64       	ori	r20, 0x44	; 68
     2cc:	54 4c       	sbci	r21, 0xC4	; 196
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	08 36       	cpi	r16, 0x68	; 104
     2d2:	41 00       	.word	0x0041	; ????
     2d4:	00 00       	nop
     2d6:	77 00       	.word	0x0077	; ????
     2d8:	00 00       	nop
     2da:	41 36       	cpi	r20, 0x61	; 97
     2dc:	08 00       	.word	0x0008	; ????
     2de:	02 01       	movw	r0, r4
     2e0:	02 04       	cpc	r0, r2
     2e2:	02 3c       	cpi	r16, 0xC2	; 194
     2e4:	26 23       	and	r18, r22
     2e6:	26 3c       	cpi	r18, 0xC6	; 198
     2e8:	1e a1       	ldd	r17, Y+38	; 0x26
     2ea:	a1 61       	ori	r26, 0x11	; 17
     2ec:	12 3a       	cpi	r17, 0xA2	; 162
     2ee:	40 40       	sbci	r20, 0x00	; 0
     2f0:	20 7a       	andi	r18, 0xA0	; 160
     2f2:	38 54       	subi	r19, 0x48	; 72
     2f4:	54 55       	subi	r21, 0x54	; 84
     2f6:	59 21       	and	r21, r9
     2f8:	55 55       	subi	r21, 0x55	; 85
     2fa:	79 41       	sbci	r23, 0x19	; 25
     2fc:	22 54       	subi	r18, 0x42	; 66
     2fe:	54 78       	andi	r21, 0x84	; 132
     300:	42 21       	and	r20, r2
     302:	55 54       	subi	r21, 0x45	; 69
     304:	78 40       	sbci	r23, 0x08	; 8
     306:	20 54       	subi	r18, 0x40	; 64
     308:	55 79       	andi	r21, 0x95	; 149
     30a:	40 0c       	add	r4, r0
     30c:	1e 52       	subi	r17, 0x2E	; 46
     30e:	72 12       	cpse	r7, r18
     310:	39 55       	subi	r19, 0x59	; 89
     312:	55 55       	subi	r21, 0x55	; 85
     314:	59 39       	cpi	r21, 0x99	; 153
     316:	54 54       	subi	r21, 0x44	; 68
     318:	54 59       	subi	r21, 0x94	; 148
     31a:	39 55       	subi	r19, 0x59	; 89
     31c:	54 54       	subi	r21, 0x44	; 68
     31e:	58 00       	.word	0x0058	; ????
     320:	00 45       	sbci	r16, 0x50	; 80
     322:	7c 41       	sbci	r23, 0x1C	; 28
     324:	00 02       	muls	r16, r16
     326:	45 7d       	andi	r20, 0xD5	; 213
     328:	42 00       	.word	0x0042	; ????
     32a:	01 45       	sbci	r16, 0x51	; 81
     32c:	7c 40       	sbci	r23, 0x0C	; 12
     32e:	7d 12       	cpse	r7, r29
     330:	11 12       	cpse	r1, r17
     332:	7d f0       	brhs	.+30     	; 0x352 <__trampolines_end+0x2ea>
     334:	28 25       	eor	r18, r8
     336:	28 f0       	brcs	.+10     	; 0x342 <__trampolines_end+0x2da>
     338:	7c 54       	subi	r23, 0x4C	; 76
     33a:	55 45       	sbci	r21, 0x55	; 85
     33c:	00 20       	and	r0, r0
     33e:	54 54       	subi	r21, 0x44	; 68
     340:	7c 54       	subi	r23, 0x4C	; 76
     342:	7c 0a       	sbc	r7, r28
     344:	09 7f       	andi	r16, 0xF9	; 249
     346:	49 32       	cpi	r20, 0x29	; 41
     348:	49 49       	sbci	r20, 0x99	; 153
     34a:	49 32       	cpi	r20, 0x29	; 41
     34c:	3a 44       	sbci	r19, 0x4A	; 74
     34e:	44 44       	sbci	r20, 0x44	; 68
     350:	3a 32       	cpi	r19, 0x2A	; 42
     352:	4a 48       	sbci	r20, 0x8A	; 138
     354:	48 30       	cpi	r20, 0x08	; 8
     356:	3a 41       	sbci	r19, 0x1A	; 26
     358:	41 21       	and	r20, r1
     35a:	7a 3a       	cpi	r23, 0xAA	; 170
     35c:	42 40       	sbci	r20, 0x02	; 2
     35e:	20 78       	andi	r18, 0x80	; 128
     360:	00 9d       	mul	r16, r0
     362:	a0 a0       	ldd	r10, Z+32	; 0x20
     364:	7d 3d       	cpi	r23, 0xDD	; 221
     366:	42 42       	sbci	r20, 0x22	; 34
     368:	42 3d       	cpi	r20, 0xD2	; 210
     36a:	3d 40       	sbci	r19, 0x0D	; 13
     36c:	40 40       	sbci	r20, 0x00	; 0
     36e:	3d 3c       	cpi	r19, 0xCD	; 205
     370:	24 ff       	sbrs	r18, 4
     372:	24 24       	eor	r2, r4
     374:	48 7e       	andi	r20, 0xE8	; 232
     376:	49 43       	sbci	r20, 0x39	; 57
     378:	66 2b       	or	r22, r22
     37a:	2f fc       	.word	0xfc2f	; ????
     37c:	2f 2b       	or	r18, r31
     37e:	ff 09       	sbc	r31, r15
     380:	29 f6       	brne	.-118    	; 0x30c <__trampolines_end+0x2a4>
     382:	20 c0       	rjmp	.+64     	; 0x3c4 <__trampolines_end+0x35c>
     384:	88 7e       	andi	r24, 0xE8	; 232
     386:	09 03       	fmul	r16, r17
     388:	20 54       	subi	r18, 0x40	; 64
     38a:	54 79       	andi	r21, 0x94	; 148
     38c:	41 00       	.word	0x0041	; ????
     38e:	00 44       	sbci	r16, 0x40	; 64
     390:	7d 41       	sbci	r23, 0x1D	; 29
     392:	30 48       	sbci	r19, 0x80	; 128
     394:	48 4a       	sbci	r20, 0xA8	; 168
     396:	32 38       	cpi	r19, 0x82	; 130
     398:	40 40       	sbci	r20, 0x00	; 0
     39a:	22 7a       	andi	r18, 0xA2	; 162
     39c:	00 7a       	andi	r16, 0xA0	; 160
     39e:	0a 0a       	sbc	r0, r26
     3a0:	72 7d       	andi	r23, 0xD2	; 210
     3a2:	0d 19       	sub	r16, r13
     3a4:	31 7d       	andi	r19, 0xD1	; 209
     3a6:	26 29       	or	r18, r6
     3a8:	29 2f       	mov	r18, r25
     3aa:	28 26       	eor	r2, r24
     3ac:	29 29       	or	r18, r9
     3ae:	29 26       	eor	r2, r25
     3b0:	30 48       	sbci	r19, 0x80	; 128
     3b2:	4d 40       	sbci	r20, 0x0D	; 13
     3b4:	20 38       	cpi	r18, 0x80	; 128
     3b6:	08 08       	sbc	r0, r8
     3b8:	08 08       	sbc	r0, r8
     3ba:	08 08       	sbc	r0, r8
     3bc:	08 08       	sbc	r0, r8
     3be:	38 2f       	mov	r19, r24
     3c0:	10 c8       	rjmp	.-4064   	; 0xfffff3e2 <__eeprom_end+0xff7ef3e2>
     3c2:	ac ba       	out	0x1c, r10	; 28
     3c4:	2f 10       	cpse	r2, r15
     3c6:	28 34       	cpi	r18, 0x48	; 72
     3c8:	fa 00       	.word	0x00fa	; ????
     3ca:	00 7b       	andi	r16, 0xB0	; 176
     3cc:	00 00       	nop
     3ce:	08 14       	cp	r0, r8
     3d0:	2a 14       	cp	r2, r10
     3d2:	22 22       	and	r2, r18
     3d4:	14 2a       	or	r1, r20
     3d6:	14 08       	sbc	r1, r4
     3d8:	aa 00       	.word	0x00aa	; ????
     3da:	55 00       	.word	0x0055	; ????
     3dc:	aa aa       	std	Y+50, r10	; 0x32
     3de:	55 aa       	std	Z+53, r5	; 0x35
     3e0:	55 aa       	std	Z+53, r5	; 0x35
     3e2:	00 00       	nop
     3e4:	00 ff       	sbrs	r16, 0
     3e6:	00 10       	cpse	r0, r0
     3e8:	10 10       	cpse	r1, r0
     3ea:	ff 00       	.word	0x00ff	; ????
     3ec:	14 14       	cp	r1, r4
     3ee:	14 ff       	sbrs	r17, 4
     3f0:	00 10       	cpse	r0, r0
     3f2:	10 ff       	sbrs	r17, 0
     3f4:	00 ff       	sbrs	r16, 0
     3f6:	10 10       	cpse	r1, r0
     3f8:	f0 10       	cpse	r15, r0
     3fa:	f0 14       	cp	r15, r0
     3fc:	14 14       	cp	r1, r4
     3fe:	fc 00       	.word	0x00fc	; ????
     400:	14 14       	cp	r1, r4
     402:	f7 00       	.word	0x00f7	; ????
     404:	ff 00       	.word	0x00ff	; ????
     406:	00 ff       	sbrs	r16, 0
     408:	00 ff       	sbrs	r16, 0
     40a:	14 14       	cp	r1, r4
     40c:	f4 04       	cpc	r15, r4
     40e:	fc 14       	cp	r15, r12
     410:	14 17       	cp	r17, r20
     412:	10 1f       	adc	r17, r16
     414:	10 10       	cpse	r1, r0
     416:	1f 10       	cpse	r1, r15
     418:	1f 14       	cp	r1, r15
     41a:	14 14       	cp	r1, r4
     41c:	1f 00       	.word	0x001f	; ????
     41e:	10 10       	cpse	r1, r0
     420:	10 f0       	brcs	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     422:	00 00       	nop
     424:	00 00       	nop
     426:	1f 10       	cpse	r1, r15
     428:	10 10       	cpse	r1, r0
     42a:	10 1f       	adc	r17, r16
     42c:	10 10       	cpse	r1, r0
     42e:	10 10       	cpse	r1, r0
     430:	f0 10       	cpse	r15, r0
     432:	00 00       	nop
     434:	00 ff       	sbrs	r16, 0
     436:	10 10       	cpse	r1, r0
     438:	10 10       	cpse	r1, r0
     43a:	10 10       	cpse	r1, r0
     43c:	10 10       	cpse	r1, r0
     43e:	10 ff       	sbrs	r17, 0
     440:	10 00       	.word	0x0010	; ????
     442:	00 00       	nop
     444:	ff 14       	cp	r15, r15
     446:	00 00       	nop
     448:	ff 00       	.word	0x00ff	; ????
     44a:	ff 00       	.word	0x00ff	; ????
     44c:	00 1f       	adc	r16, r16
     44e:	10 17       	cp	r17, r16
     450:	00 00       	nop
     452:	fc 04       	cpc	r15, r12
     454:	f4 14       	cp	r15, r4
     456:	14 17       	cp	r17, r20
     458:	10 17       	cp	r17, r16
     45a:	14 14       	cp	r1, r4
     45c:	f4 04       	cpc	r15, r4
     45e:	f4 00       	.word	0x00f4	; ????
     460:	00 ff       	sbrs	r16, 0
     462:	00 f7       	brcc	.-64     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     464:	14 14       	cp	r1, r4
     466:	14 14       	cp	r1, r4
     468:	14 14       	cp	r1, r4
     46a:	14 f7       	brge	.-60     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     46c:	00 f7       	brcc	.-64     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     46e:	14 14       	cp	r1, r4
     470:	14 17       	cp	r17, r20
     472:	14 10       	cpse	r1, r4
     474:	10 1f       	adc	r17, r16
     476:	10 1f       	adc	r17, r16
     478:	14 14       	cp	r1, r4
     47a:	14 f4       	brge	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47c:	14 10       	cpse	r1, r4
     47e:	10 f0       	brcs	.+4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     480:	10 f0       	brcs	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     482:	00 00       	nop
     484:	1f 10       	cpse	r1, r15
     486:	1f 00       	.word	0x001f	; ????
     488:	00 00       	nop
     48a:	1f 14       	cp	r1, r15
     48c:	00 00       	nop
     48e:	00 fc       	sbrc	r0, 0
     490:	14 00       	.word	0x0014	; ????
     492:	00 f0       	brcs	.+0      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     494:	10 f0       	brcs	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     496:	10 10       	cpse	r1, r0
     498:	ff 10       	cpse	r15, r15
     49a:	ff 14       	cp	r15, r15
     49c:	14 14       	cp	r1, r4
     49e:	ff 14       	cp	r15, r15
     4a0:	10 10       	cpse	r1, r0
     4a2:	10 1f       	adc	r17, r16
     4a4:	00 00       	nop
     4a6:	00 00       	nop
     4a8:	f0 10       	cpse	r15, r0
     4aa:	ff ff       	.word	0xffff	; ????
     4ac:	ff ff       	.word	0xffff	; ????
     4ae:	ff f0       	brie	.+62     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4b0:	f0 f0       	brcs	.+60     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4b2:	f0 f0       	brcs	.+60     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4b4:	ff ff       	.word	0xffff	; ????
     4b6:	ff 00       	.word	0x00ff	; ????
     4b8:	00 00       	nop
     4ba:	00 00       	nop
     4bc:	ff ff       	.word	0xffff	; ????
     4be:	0f 0f       	add	r16, r31
     4c0:	0f 0f       	add	r16, r31
     4c2:	0f 38       	cpi	r16, 0x8F	; 143
     4c4:	44 44       	sbci	r20, 0x44	; 68
     4c6:	38 44       	sbci	r19, 0x48	; 72
     4c8:	fc 4a       	sbci	r31, 0xAC	; 172
     4ca:	4a 4a       	sbci	r20, 0xAA	; 170
     4cc:	34 7e       	andi	r19, 0xE4	; 228
     4ce:	02 02       	muls	r16, r18
     4d0:	06 06       	cpc	r0, r22
     4d2:	02 7e       	andi	r16, 0xE2	; 226
     4d4:	02 7e       	andi	r16, 0xE2	; 226
     4d6:	02 63       	ori	r16, 0x32	; 50
     4d8:	55 49       	sbci	r21, 0x95	; 149
     4da:	41 63       	ori	r20, 0x31	; 49
     4dc:	38 44       	sbci	r19, 0x48	; 72
     4de:	44 3c       	cpi	r20, 0xC4	; 196
     4e0:	04 40       	sbci	r16, 0x04	; 4
     4e2:	7e 20       	and	r7, r14
     4e4:	1e 20       	and	r1, r14
     4e6:	06 02       	muls	r16, r22
     4e8:	7e 02       	muls	r23, r30
     4ea:	02 99       	sbic	0x00, 2	; 0
     4ec:	a5 e7       	ldi	r26, 0x75	; 117
     4ee:	a5 99       	sbic	0x14, 5	; 20
     4f0:	1c 2a       	or	r1, r28
     4f2:	49 2a       	or	r4, r25
     4f4:	1c 4c       	sbci	r17, 0xCC	; 204
     4f6:	72 01       	movw	r14, r4
     4f8:	72 4c       	sbci	r23, 0xC2	; 194
     4fa:	30 4a       	sbci	r19, 0xA0	; 160
     4fc:	4d 4d       	sbci	r20, 0xDD	; 221
     4fe:	30 30       	cpi	r19, 0x00	; 0
     500:	48 78       	andi	r20, 0x88	; 136
     502:	48 30       	cpi	r20, 0x08	; 8
     504:	bc 62       	ori	r27, 0x2C	; 44
     506:	5a 46       	sbci	r21, 0x6A	; 106
     508:	3d 3e       	cpi	r19, 0xED	; 237
     50a:	49 49       	sbci	r20, 0x99	; 153
     50c:	49 00       	.word	0x0049	; ????
     50e:	7e 01       	movw	r14, r28
     510:	01 01       	movw	r0, r2
     512:	7e 2a       	or	r7, r30
     514:	2a 2a       	or	r2, r26
     516:	2a 2a       	or	r2, r26
     518:	44 44       	sbci	r20, 0x44	; 68
     51a:	5f 44       	sbci	r21, 0x4F	; 79
     51c:	44 40       	sbci	r20, 0x04	; 4
     51e:	51 4a       	sbci	r21, 0xA1	; 161
     520:	44 40       	sbci	r20, 0x04	; 4
     522:	40 44       	sbci	r20, 0x40	; 64
     524:	4a 51       	subi	r20, 0x1A	; 26
     526:	40 00       	.word	0x0040	; ????
     528:	00 ff       	sbrs	r16, 0
     52a:	01 03       	mulsu	r16, r17
     52c:	e0 80       	ld	r14, Z
     52e:	ff 00       	.word	0x00ff	; ????
     530:	00 08       	sbc	r0, r0
     532:	08 6b       	ori	r16, 0xB8	; 184
     534:	6b 08       	sbc	r6, r11
     536:	36 12       	cpse	r3, r22
     538:	36 24       	eor	r3, r6
     53a:	36 06       	cpc	r3, r22
     53c:	0f 09       	sbc	r16, r15
     53e:	0f 06       	cpc	r0, r31
     540:	00 00       	nop
     542:	18 18       	sub	r1, r8
     544:	00 00       	nop
     546:	00 10       	cpse	r0, r0
     548:	10 00       	.word	0x0010	; ????
     54a:	30 40       	sbci	r19, 0x00	; 0
     54c:	ff 01       	movw	r30, r30
     54e:	01 00       	.word	0x0001	; ????
     550:	1f 01       	movw	r2, r30
     552:	01 1e       	adc	r0, r17
     554:	00 19       	sub	r16, r0
     556:	1d 17       	cp	r17, r29
     558:	12 00       	.word	0x0012	; ????
     55a:	3c 3c       	cpi	r19, 0xCC	; 204
     55c:	3c 3c       	cpi	r19, 0xCC	; 204
     55e:	00 00       	nop
     560:	00 00       	nop
	...

00000564 <__ctors_end>:
     564:	11 24       	eor	r1, r1
     566:	1f be       	out	0x3f, r1	; 63
     568:	cf ef       	ldi	r28, 0xFF	; 255
     56a:	d8 e0       	ldi	r29, 0x08	; 8
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	cd bf       	out	0x3d, r28	; 61

00000570 <__do_copy_data>:
     570:	11 e0       	ldi	r17, 0x01	; 1
     572:	a0 e0       	ldi	r26, 0x00	; 0
     574:	b1 e0       	ldi	r27, 0x01	; 1
     576:	ea e4       	ldi	r30, 0x4A	; 74
     578:	f6 e2       	ldi	r31, 0x26	; 38
     57a:	02 c0       	rjmp	.+4      	; 0x580 <__do_copy_data+0x10>
     57c:	05 90       	lpm	r0, Z+
     57e:	0d 92       	st	X+, r0
     580:	a2 3d       	cpi	r26, 0xD2	; 210
     582:	b1 07       	cpc	r27, r17
     584:	d9 f7       	brne	.-10     	; 0x57c <__do_copy_data+0xc>

00000586 <__do_clear_bss>:
     586:	21 e0       	ldi	r18, 0x01	; 1
     588:	a2 ed       	ldi	r26, 0xD2	; 210
     58a:	b1 e0       	ldi	r27, 0x01	; 1
     58c:	01 c0       	rjmp	.+2      	; 0x590 <.do_clear_bss_start>

0000058e <.do_clear_bss_loop>:
     58e:	1d 92       	st	X+, r1

00000590 <.do_clear_bss_start>:
     590:	a1 3f       	cpi	r26, 0xF1	; 241
     592:	b2 07       	cpc	r27, r18
     594:	e1 f7       	brne	.-8      	; 0x58e <.do_clear_bss_loop>
     596:	0e 94 c4 0b 	call	0x1788	; 0x1788 <main>
     59a:	0c 94 23 13 	jmp	0x2646	; 0x2646 <_exit>

0000059e <__bad_interrupt>:
     59e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005a2 <ili9341_hard_init>:
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	8a b9       	out	0x0a, r24	; 10
     5a6:	5f 9a       	sbi	0x0b, 7	; 11
     5a8:	20 9a       	sbi	0x04, 0	; 4
     5aa:	08 95       	ret

000005ac <ili9341_spi_init>:
     5ac:	84 b1       	in	r24, 0x04	; 4
     5ae:	8e 62       	ori	r24, 0x2E	; 46
     5b0:	84 b9       	out	0x04, r24	; 4
     5b2:	80 e5       	ldi	r24, 0x50	; 80
     5b4:	8c bd       	out	0x2c, r24	; 44
     5b6:	8d b5       	in	r24, 0x2d	; 45
     5b8:	81 60       	ori	r24, 0x01	; 1
     5ba:	8d bd       	out	0x2d, r24	; 45
     5bc:	29 9a       	sbi	0x05, 1	; 5
     5be:	08 95       	ret

000005c0 <ili9341_spi_send>:
     5c0:	8e bd       	out	0x2e, r24	; 46
     5c2:	0d b4       	in	r0, 0x2d	; 45
     5c4:	07 fe       	sbrs	r0, 7
     5c6:	fd cf       	rjmp	.-6      	; 0x5c2 <ili9341_spi_send+0x2>
     5c8:	08 95       	ret

000005ca <ili9341_writecommand8>:
     5ca:	95 b1       	in	r25, 0x05	; 5
     5cc:	9c 7f       	andi	r25, 0xFC	; 252
     5ce:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <ili9341_writecommand8+0x8>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <ili9341_writecommand8+0xa>
     5d4:	00 00       	nop
     5d6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <ili9341_spi_send>
     5da:	29 9a       	sbi	0x05, 1	; 5
     5dc:	08 95       	ret

000005de <ili9341_writedata8>:
     5de:	28 9a       	sbi	0x05, 0	; 5
     5e0:	00 00       	nop
     5e2:	29 98       	cbi	0x05, 1	; 5
     5e4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <ili9341_spi_send>
     5e8:	29 9a       	sbi	0x05, 1	; 5
     5ea:	08 95       	ret

000005ec <ili9341_setaddress>:
     5ec:	df 92       	push	r13
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	e8 2e       	mov	r14, r24
     5fc:	d9 2e       	mov	r13, r25
     5fe:	d6 2f       	mov	r29, r22
     600:	17 2f       	mov	r17, r23
     602:	04 2f       	mov	r16, r20
     604:	f5 2e       	mov	r15, r21
     606:	c2 2f       	mov	r28, r18
     608:	8a e2       	ldi	r24, 0x2A	; 42
     60a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     60e:	8d 2d       	mov	r24, r13
     610:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     614:	8e 2d       	mov	r24, r14
     616:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     61a:	8f 2d       	mov	r24, r15
     61c:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     620:	80 2f       	mov	r24, r16
     622:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     626:	8b e2       	ldi	r24, 0x2B	; 43
     628:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     62c:	81 2f       	mov	r24, r17
     62e:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     632:	8d 2f       	mov	r24, r29
     634:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     638:	8c 2f       	mov	r24, r28
     63a:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     63e:	8c 2f       	mov	r24, r28
     640:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     644:	8c e2       	ldi	r24, 0x2C	; 44
     646:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	df 90       	pop	r13
     658:	08 95       	ret

0000065a <ili9341_hard_reset>:
     65a:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     65c:	8f e4       	ldi	r24, 0x4F	; 79
     65e:	93 ec       	ldi	r25, 0xC3	; 195
     660:	01 97       	sbiw	r24, 0x01	; 1
     662:	f1 f7       	brne	.-4      	; 0x660 <ili9341_hard_reset+0x6>
     664:	00 c0       	rjmp	.+0      	; 0x666 <ili9341_hard_reset+0xc>
     666:	00 00       	nop
     668:	5f 98       	cbi	0x0b, 7	; 11
     66a:	8f e4       	ldi	r24, 0x4F	; 79
     66c:	93 ec       	ldi	r25, 0xC3	; 195
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <ili9341_hard_reset+0x14>
     672:	00 c0       	rjmp	.+0      	; 0x674 <ili9341_hard_reset+0x1a>
     674:	00 00       	nop
     676:	5f 9a       	sbi	0x0b, 7	; 11
     678:	8f e4       	ldi	r24, 0x4F	; 79
     67a:	93 ec       	ldi	r25, 0xC3	; 195
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	f1 f7       	brne	.-4      	; 0x67c <ili9341_hard_reset+0x22>
     680:	00 c0       	rjmp	.+0      	; 0x682 <ili9341_hard_reset+0x28>
     682:	00 00       	nop
     684:	08 95       	ret

00000686 <ili9341_init>:
     686:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <ili9341_hard_init>
     68a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <ili9341_spi_init>
     68e:	0e 94 2d 03 	call	0x65a	; 0x65a <ili9341_hard_reset>
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     698:	2f e3       	ldi	r18, 0x3F	; 63
     69a:	8d e0       	ldi	r24, 0x0D	; 13
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	21 50       	subi	r18, 0x01	; 1
     6a0:	80 40       	sbci	r24, 0x00	; 0
     6a2:	90 40       	sbci	r25, 0x00	; 0
     6a4:	e1 f7       	brne	.-8      	; 0x69e <ili9341_init+0x18>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <ili9341_init+0x22>
     6a8:	00 00       	nop
     6aa:	8b ec       	ldi	r24, 0xCB	; 203
     6ac:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     6b0:	89 e3       	ldi	r24, 0x39	; 57
     6b2:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     6b6:	8c e2       	ldi	r24, 0x2C	; 44
     6b8:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     6c2:	84 e3       	ldi	r24, 0x34	; 52
     6c4:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     6c8:	82 e0       	ldi	r24, 0x02	; 2
     6ca:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     6ce:	8f ec       	ldi	r24, 0xCF	; 207
     6d0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     6da:	81 ec       	ldi	r24, 0xC1	; 193
     6dc:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     6e0:	80 e3       	ldi	r24, 0x30	; 48
     6e2:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     6e6:	88 ee       	ldi	r24, 0xE8	; 232
     6e8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     6ec:	85 e8       	ldi	r24, 0x85	; 133
     6ee:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     6f8:	88 e7       	ldi	r24, 0x78	; 120
     6fa:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     6fe:	8a ee       	ldi	r24, 0xEA	; 234
     700:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     710:	8d ee       	ldi	r24, 0xED	; 237
     712:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     716:	84 e6       	ldi	r24, 0x64	; 100
     718:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     722:	82 e1       	ldi	r24, 0x12	; 18
     724:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     728:	81 e8       	ldi	r24, 0x81	; 129
     72a:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     72e:	87 ef       	ldi	r24, 0xF7	; 247
     730:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     734:	80 e2       	ldi	r24, 0x20	; 32
     736:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     73a:	80 ec       	ldi	r24, 0xC0	; 192
     73c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     740:	83 e2       	ldi	r24, 0x23	; 35
     742:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     746:	81 ec       	ldi	r24, 0xC1	; 193
     748:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     74c:	80 e1       	ldi	r24, 0x10	; 16
     74e:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     752:	85 ec       	ldi	r24, 0xC5	; 197
     754:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     758:	8e e3       	ldi	r24, 0x3E	; 62
     75a:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     75e:	88 e2       	ldi	r24, 0x28	; 40
     760:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     764:	87 ec       	ldi	r24, 0xC7	; 199
     766:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     76a:	86 e8       	ldi	r24, 0x86	; 134
     76c:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     770:	86 e3       	ldi	r24, 0x36	; 54
     772:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     776:	88 e4       	ldi	r24, 0x48	; 72
     778:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     77c:	8a e3       	ldi	r24, 0x3A	; 58
     77e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     782:	85 e5       	ldi	r24, 0x55	; 85
     784:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     788:	81 eb       	ldi	r24, 0xB1	; 177
     78a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     794:	88 e1       	ldi	r24, 0x18	; 24
     796:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     79a:	86 eb       	ldi	r24, 0xB6	; 182
     79c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     7a0:	88 e0       	ldi	r24, 0x08	; 8
     7a2:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     7a6:	82 e8       	ldi	r24, 0x82	; 130
     7a8:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     7ac:	87 e2       	ldi	r24, 0x27	; 39
     7ae:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     7b2:	82 ef       	ldi	r24, 0xF2	; 242
     7b4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     7be:	86 e2       	ldi	r24, 0x26	; 38
     7c0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     7ca:	80 ee       	ldi	r24, 0xE0	; 224
     7cc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     7d0:	8f e0       	ldi	r24, 0x0F	; 15
     7d2:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     7d6:	81 e3       	ldi	r24, 0x31	; 49
     7d8:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     7dc:	8b e2       	ldi	r24, 0x2B	; 43
     7de:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     7e2:	8c e0       	ldi	r24, 0x0C	; 12
     7e4:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     7e8:	8e e0       	ldi	r24, 0x0E	; 14
     7ea:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     7ee:	88 e0       	ldi	r24, 0x08	; 8
     7f0:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     7f4:	8e e4       	ldi	r24, 0x4E	; 78
     7f6:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     7fa:	81 ef       	ldi	r24, 0xF1	; 241
     7fc:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     800:	87 e3       	ldi	r24, 0x37	; 55
     802:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     806:	87 e0       	ldi	r24, 0x07	; 7
     808:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     80c:	80 e1       	ldi	r24, 0x10	; 16
     80e:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     818:	8e e0       	ldi	r24, 0x0E	; 14
     81a:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     81e:	89 e0       	ldi	r24, 0x09	; 9
     820:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     82a:	81 ee       	ldi	r24, 0xE1	; 225
     82c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     836:	8e e0       	ldi	r24, 0x0E	; 14
     838:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     83c:	84 e1       	ldi	r24, 0x14	; 20
     83e:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     842:	83 e0       	ldi	r24, 0x03	; 3
     844:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     848:	81 e1       	ldi	r24, 0x11	; 17
     84a:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     84e:	87 e0       	ldi	r24, 0x07	; 7
     850:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     854:	81 e3       	ldi	r24, 0x31	; 49
     856:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     85a:	81 ec       	ldi	r24, 0xC1	; 193
     85c:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     860:	88 e4       	ldi	r24, 0x48	; 72
     862:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     866:	88 e0       	ldi	r24, 0x08	; 8
     868:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     86c:	8f e0       	ldi	r24, 0x0F	; 15
     86e:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     872:	8c e0       	ldi	r24, 0x0C	; 12
     874:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     878:	81 e3       	ldi	r24, 0x31	; 49
     87a:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     87e:	86 e3       	ldi	r24, 0x36	; 54
     880:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     884:	8f e0       	ldi	r24, 0x0F	; 15
     886:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     88a:	81 e1       	ldi	r24, 0x11	; 17
     88c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     890:	8f e2       	ldi	r24, 0x2F	; 47
     892:	95 e7       	ldi	r25, 0x75	; 117
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	f1 f7       	brne	.-4      	; 0x894 <ili9341_init+0x20e>
     898:	00 c0       	rjmp	.+0      	; 0x89a <ili9341_init+0x214>
     89a:	00 00       	nop
     89c:	89 e2       	ldi	r24, 0x29	; 41
     89e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     8a2:	08 95       	ret

000008a4 <ili9341_pushcolour>:
     8a4:	cf 93       	push	r28
     8a6:	c8 2f       	mov	r28, r24
     8a8:	89 2f       	mov	r24, r25
     8aa:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     8ae:	8c 2f       	mov	r24, r28
     8b0:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <ili9341_clear>:
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	8c 01       	movw	r16, r24
     8c6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <LCD_H>
     8ca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <LCD_H+0x1>
     8ce:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <LCD_W>
     8d2:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <LCD_W+0x1>
     8d6:	21 50       	subi	r18, 0x01	; 1
     8d8:	31 09       	sbc	r19, r1
     8da:	41 50       	subi	r20, 0x01	; 1
     8dc:	51 09       	sbc	r21, r1
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <ili9341_setaddress>
     8ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <LCD_W>
     8ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <LCD_W+0x1>
     8f2:	89 2b       	or	r24, r25
     8f4:	c9 f4       	brne	.+50     	; 0x928 <__stack+0x29>
     8f6:	21 c0       	rjmp	.+66     	; 0x93a <__stack+0x3b>
     8f8:	c0 e0       	ldi	r28, 0x00	; 0
     8fa:	d0 e0       	ldi	r29, 0x00	; 0
     8fc:	c8 01       	movw	r24, r16
     8fe:	0e 94 52 04 	call	0x8a4	; 0x8a4 <ili9341_pushcolour>
     902:	21 96       	adiw	r28, 0x01	; 1
     904:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <LCD_H>
     908:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <LCD_H+0x1>
     90c:	c8 17       	cp	r28, r24
     90e:	d9 07       	cpc	r29, r25
     910:	a8 f3       	brcs	.-22     	; 0x8fc <ili9341_clear+0x44>
     912:	8f ef       	ldi	r24, 0xFF	; 255
     914:	e8 1a       	sub	r14, r24
     916:	f8 0a       	sbc	r15, r24
     918:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <LCD_W>
     91c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <LCD_W+0x1>
     920:	e8 16       	cp	r14, r24
     922:	f9 06       	cpc	r15, r25
     924:	18 f0       	brcs	.+6      	; 0x92c <__stack+0x2d>
     926:	09 c0       	rjmp	.+18     	; 0x93a <__stack+0x3b>
     928:	e1 2c       	mov	r14, r1
     92a:	f1 2c       	mov	r15, r1
     92c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <LCD_H>
     930:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <LCD_H+0x1>
     934:	89 2b       	or	r24, r25
     936:	01 f7       	brne	.-64     	; 0x8f8 <ili9341_clear+0x40>
     938:	ec cf       	rjmp	.-40     	; 0x912 <__stack+0x13>
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	ff 90       	pop	r15
     944:	ef 90       	pop	r14
     946:	08 95       	ret

00000948 <ili9341_drawpixel>:
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <LCD_W>
     950:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <LCD_W+0x1>
     954:	82 17       	cp	r24, r18
     956:	93 07       	cpc	r25, r19
     958:	98 f4       	brcc	.+38     	; 0x980 <ili9341_drawpixel+0x38>
     95a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <LCD_H>
     95e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <LCD_H+0x1>
     962:	62 17       	cp	r22, r18
     964:	73 07       	cpc	r23, r19
     966:	60 f4       	brcc	.+24     	; 0x980 <ili9341_drawpixel+0x38>
     968:	ea 01       	movw	r28, r20
     96a:	9b 01       	movw	r18, r22
     96c:	2f 5f       	subi	r18, 0xFF	; 255
     96e:	3f 4f       	sbci	r19, 0xFF	; 255
     970:	ac 01       	movw	r20, r24
     972:	4f 5f       	subi	r20, 0xFF	; 255
     974:	5f 4f       	sbci	r21, 0xFF	; 255
     976:	0e 94 f6 02 	call	0x5ec	; 0x5ec <ili9341_setaddress>
     97a:	ce 01       	movw	r24, r28
     97c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <ili9341_pushcolour>
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <ili9341_drawvline>:
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	ea 01       	movw	r28, r20
     990:	89 01       	movw	r16, r18
     992:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <LCD_W>
     996:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <LCD_W+0x1>
     99a:	82 17       	cp	r24, r18
     99c:	93 07       	cpc	r25, r19
     99e:	40 f5       	brcc	.+80     	; 0x9f0 <ili9341_drawvline+0x6a>
     9a0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <LCD_H>
     9a4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <LCD_H+0x1>
     9a8:	62 17       	cp	r22, r18
     9aa:	73 07       	cpc	r23, r19
     9ac:	08 f5       	brcc	.+66     	; 0x9f0 <ili9341_drawvline+0x6a>
     9ae:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <LCD_H>
     9b2:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <LCD_H+0x1>
     9b6:	9e 01       	movw	r18, r28
     9b8:	21 50       	subi	r18, 0x01	; 1
     9ba:	31 09       	sbc	r19, r1
     9bc:	26 0f       	add	r18, r22
     9be:	37 1f       	adc	r19, r23
     9c0:	24 17       	cp	r18, r20
     9c2:	35 07       	cpc	r19, r21
     9c4:	30 f0       	brcs	.+12     	; 0x9d2 <ili9341_drawvline+0x4c>
     9c6:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <LCD_H>
     9ca:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <LCD_H+0x1>
     9ce:	c6 1b       	sub	r28, r22
     9d0:	d7 0b       	sbc	r29, r23
     9d2:	9b 01       	movw	r18, r22
     9d4:	21 50       	subi	r18, 0x01	; 1
     9d6:	31 09       	sbc	r19, r1
     9d8:	2c 0f       	add	r18, r28
     9da:	3d 1f       	adc	r19, r29
     9dc:	ac 01       	movw	r20, r24
     9de:	0e 94 f6 02 	call	0x5ec	; 0x5ec <ili9341_setaddress>
     9e2:	20 97       	sbiw	r28, 0x00	; 0
     9e4:	29 f0       	breq	.+10     	; 0x9f0 <ili9341_drawvline+0x6a>
     9e6:	c8 01       	movw	r24, r16
     9e8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <ili9341_pushcolour>
     9ec:	21 97       	sbiw	r28, 0x01	; 1
     9ee:	d9 f7       	brne	.-10     	; 0x9e6 <ili9341_drawvline+0x60>
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	08 95       	ret

000009fa <ili9341_drawhline>:
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ea 01       	movw	r28, r20
     a04:	89 01       	movw	r16, r18
     a06:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <LCD_W>
     a0a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <LCD_W+0x1>
     a0e:	82 17       	cp	r24, r18
     a10:	93 07       	cpc	r25, r19
     a12:	40 f5       	brcc	.+80     	; 0xa64 <ili9341_drawhline+0x6a>
     a14:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <LCD_H>
     a18:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <LCD_H+0x1>
     a1c:	62 17       	cp	r22, r18
     a1e:	73 07       	cpc	r23, r19
     a20:	08 f5       	brcc	.+66     	; 0xa64 <ili9341_drawhline+0x6a>
     a22:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <LCD_W>
     a26:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <LCD_W+0x1>
     a2a:	9e 01       	movw	r18, r28
     a2c:	21 50       	subi	r18, 0x01	; 1
     a2e:	31 09       	sbc	r19, r1
     a30:	28 0f       	add	r18, r24
     a32:	39 1f       	adc	r19, r25
     a34:	24 17       	cp	r18, r20
     a36:	35 07       	cpc	r19, r21
     a38:	30 f0       	brcs	.+12     	; 0xa46 <ili9341_drawhline+0x4c>
     a3a:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <LCD_W>
     a3e:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <LCD_W+0x1>
     a42:	c8 1b       	sub	r28, r24
     a44:	d9 0b       	sbc	r29, r25
     a46:	ac 01       	movw	r20, r24
     a48:	41 50       	subi	r20, 0x01	; 1
     a4a:	51 09       	sbc	r21, r1
     a4c:	4c 0f       	add	r20, r28
     a4e:	5d 1f       	adc	r21, r29
     a50:	9b 01       	movw	r18, r22
     a52:	0e 94 f6 02 	call	0x5ec	; 0x5ec <ili9341_setaddress>
     a56:	20 97       	sbiw	r28, 0x00	; 0
     a58:	29 f0       	breq	.+10     	; 0xa64 <ili9341_drawhline+0x6a>
     a5a:	c8 01       	movw	r24, r16
     a5c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <ili9341_pushcolour>
     a60:	21 97       	sbiw	r28, 0x01	; 1
     a62:	d9 f7       	brne	.-10     	; 0xa5a <ili9341_drawhline+0x60>
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <ili9341_fillrect>:
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	6a 01       	movw	r12, r20
     a80:	79 01       	movw	r14, r18
     a82:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <LCD_W>
     a86:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <LCD_W+0x1>
     a8a:	82 17       	cp	r24, r18
     a8c:	93 07       	cpc	r25, r19
     a8e:	08 f0       	brcs	.+2      	; 0xa92 <ili9341_fillrect+0x24>
     a90:	4a c0       	rjmp	.+148    	; 0xb26 <ili9341_fillrect+0xb8>
     a92:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <LCD_H>
     a96:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <LCD_H+0x1>
     a9a:	62 17       	cp	r22, r18
     a9c:	73 07       	cpc	r23, r19
     a9e:	08 f0       	brcs	.+2      	; 0xaa2 <ili9341_fillrect+0x34>
     aa0:	42 c0       	rjmp	.+132    	; 0xb26 <ili9341_fillrect+0xb8>
     aa2:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <LCD_W>
     aa6:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <LCD_W+0x1>
     aaa:	96 01       	movw	r18, r12
     aac:	21 50       	subi	r18, 0x01	; 1
     aae:	31 09       	sbc	r19, r1
     ab0:	28 0f       	add	r18, r24
     ab2:	39 1f       	adc	r19, r25
     ab4:	24 17       	cp	r18, r20
     ab6:	35 07       	cpc	r19, r21
     ab8:	30 f0       	brcs	.+12     	; 0xac6 <ili9341_fillrect+0x58>
     aba:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <LCD_W>
     abe:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <LCD_W+0x1>
     ac2:	c8 1a       	sub	r12, r24
     ac4:	d9 0a       	sbc	r13, r25
     ac6:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <LCD_H>
     aca:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <LCD_H+0x1>
     ace:	97 01       	movw	r18, r14
     ad0:	21 50       	subi	r18, 0x01	; 1
     ad2:	31 09       	sbc	r19, r1
     ad4:	26 0f       	add	r18, r22
     ad6:	37 1f       	adc	r19, r23
     ad8:	24 17       	cp	r18, r20
     ada:	35 07       	cpc	r19, r21
     adc:	30 f0       	brcs	.+12     	; 0xaea <ili9341_fillrect+0x7c>
     ade:	e0 90 00 01 	lds	r14, 0x0100	; 0x800100 <LCD_H>
     ae2:	f0 90 01 01 	lds	r15, 0x0101	; 0x800101 <LCD_H+0x1>
     ae6:	e6 1a       	sub	r14, r22
     ae8:	f7 0a       	sbc	r15, r23
     aea:	9b 01       	movw	r18, r22
     aec:	21 50       	subi	r18, 0x01	; 1
     aee:	31 09       	sbc	r19, r1
     af0:	2e 0d       	add	r18, r14
     af2:	3f 1d       	adc	r19, r15
     af4:	ac 01       	movw	r20, r24
     af6:	41 50       	subi	r20, 0x01	; 1
     af8:	51 09       	sbc	r21, r1
     afa:	4c 0d       	add	r20, r12
     afc:	5d 1d       	adc	r21, r13
     afe:	0e 94 f6 02 	call	0x5ec	; 0x5ec <ili9341_setaddress>
     b02:	e1 14       	cp	r14, r1
     b04:	f1 04       	cpc	r15, r1
     b06:	59 f4       	brne	.+22     	; 0xb1e <ili9341_fillrect+0xb0>
     b08:	0e c0       	rjmp	.+28     	; 0xb26 <ili9341_fillrect+0xb8>
     b0a:	e6 01       	movw	r28, r12
     b0c:	c8 01       	movw	r24, r16
     b0e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <ili9341_pushcolour>
     b12:	21 97       	sbiw	r28, 0x01	; 1
     b14:	d9 f7       	brne	.-10     	; 0xb0c <ili9341_fillrect+0x9e>
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	e8 1a       	sub	r14, r24
     b1a:	f1 08       	sbc	r15, r1
     b1c:	21 f0       	breq	.+8      	; 0xb26 <ili9341_fillrect+0xb8>
     b1e:	c1 14       	cp	r12, r1
     b20:	d1 04       	cpc	r13, r1
     b22:	99 f7       	brne	.-26     	; 0xb0a <ili9341_fillrect+0x9c>
     b24:	f8 cf       	rjmp	.-16     	; 0xb16 <ili9341_fillrect+0xa8>
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	df 90       	pop	r13
     b34:	cf 90       	pop	r12
     b36:	08 95       	ret

00000b38 <ili9341_setRotation>:
     b38:	cf 93       	push	r28
     b3a:	c8 2f       	mov	r28, r24
     b3c:	86 e3       	ldi	r24, 0x36	; 54
     b3e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ili9341_writecommand8>
     b42:	8c 2f       	mov	r24, r28
     b44:	83 70       	andi	r24, 0x03	; 3
     b46:	81 30       	cpi	r24, 0x01	; 1
     b48:	b1 f0       	breq	.+44     	; 0xb76 <ili9341_setRotation+0x3e>
     b4a:	28 f0       	brcs	.+10     	; 0xb56 <ili9341_setRotation+0x1e>
     b4c:	82 30       	cpi	r24, 0x02	; 2
     b4e:	19 f1       	breq	.+70     	; 0xb96 <ili9341_setRotation+0x5e>
     b50:	83 30       	cpi	r24, 0x03	; 3
     b52:	89 f1       	breq	.+98     	; 0xbb6 <ili9341_setRotation+0x7e>
     b54:	3f c0       	rjmp	.+126    	; 0xbd4 <ili9341_setRotation+0x9c>
     b56:	88 e4       	ldi	r24, 0x48	; 72
     b58:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     b5c:	80 ef       	ldi	r24, 0xF0	; 240
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <LCD_W+0x1>
     b64:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <LCD_W>
     b68:	80 e4       	ldi	r24, 0x40	; 64
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <LCD_H+0x1>
     b70:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <LCD_H>
     b74:	2f c0       	rjmp	.+94     	; 0xbd4 <ili9341_setRotation+0x9c>
     b76:	88 e2       	ldi	r24, 0x28	; 40
     b78:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     b7c:	80 e4       	ldi	r24, 0x40	; 64
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <LCD_W+0x1>
     b84:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <LCD_W>
     b88:	80 ef       	ldi	r24, 0xF0	; 240
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <LCD_H+0x1>
     b90:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <LCD_H>
     b94:	1f c0       	rjmp	.+62     	; 0xbd4 <ili9341_setRotation+0x9c>
     b96:	88 e8       	ldi	r24, 0x88	; 136
     b98:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     b9c:	80 ef       	ldi	r24, 0xF0	; 240
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <LCD_W+0x1>
     ba4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <LCD_W>
     ba8:	80 e4       	ldi	r24, 0x40	; 64
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <LCD_H+0x1>
     bb0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <LCD_H>
     bb4:	0f c0       	rjmp	.+30     	; 0xbd4 <ili9341_setRotation+0x9c>
     bb6:	88 ee       	ldi	r24, 0xE8	; 232
     bb8:	0e 94 ef 02 	call	0x5de	; 0x5de <ili9341_writedata8>
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <LCD_W+0x1>
     bc4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <LCD_W>
     bc8:	80 ef       	ldi	r24, 0xF0	; 240
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <LCD_H+0x1>
     bd0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <LCD_H>
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <ili9341_drawchar>:
     bd8:	2f 92       	push	r2
     bda:	3f 92       	push	r3
     bdc:	4f 92       	push	r4
     bde:	5f 92       	push	r5
     be0:	6f 92       	push	r6
     be2:	7f 92       	push	r7
     be4:	8f 92       	push	r8
     be6:	9f 92       	push	r9
     be8:	af 92       	push	r10
     bea:	bf 92       	push	r11
     bec:	cf 92       	push	r12
     bee:	df 92       	push	r13
     bf0:	ef 92       	push	r14
     bf2:	ff 92       	push	r15
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	2e 97       	sbiw	r28, 0x0e	; 14
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <LCD_W>
     c10:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <LCD_W+0x1>
     c14:	8e 17       	cp	r24, r30
     c16:	9f 07       	cpc	r25, r31
     c18:	08 f0       	brcs	.+2      	; 0xc1c <ili9341_drawchar+0x44>
     c1a:	9e c0       	rjmp	.+316    	; 0xd58 <ili9341_drawchar+0x180>
     c1c:	78 87       	std	Y+8, r23	; 0x08
     c1e:	6f 83       	std	Y+7, r22	; 0x07
     c20:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <LCD_H>
     c24:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <LCD_H+0x1>
     c28:	6e 17       	cp	r22, r30
     c2a:	7f 07       	cpc	r23, r31
     c2c:	08 f0       	brcs	.+2      	; 0xc30 <ili9341_drawchar+0x58>
     c2e:	94 c0       	rjmp	.+296    	; 0xd58 <ili9341_drawchar+0x180>
     c30:	ce 2c       	mov	r12, r14
     c32:	d1 2c       	mov	r13, r1
     c34:	da 82       	std	Y+2, r13	; 0x02
     c36:	c9 82       	std	Y+1, r12	; 0x01
     c38:	f6 01       	movw	r30, r12
     c3a:	ee 0f       	add	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	ec 0d       	add	r30, r12
     c40:	fd 1d       	adc	r31, r13
     c42:	ee 0f       	add	r30, r30
     c44:	ff 1f       	adc	r31, r31
     c46:	e8 0f       	add	r30, r24
     c48:	f9 1f       	adc	r31, r25
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	0a f4       	brpl	.+2      	; 0xc50 <ili9341_drawchar+0x78>
     c4e:	84 c0       	rjmp	.+264    	; 0xd58 <ili9341_drawchar+0x180>
     c50:	cc 0c       	add	r12, r12
     c52:	dd 1c       	adc	r13, r13
     c54:	cc 0c       	add	r12, r12
     c56:	dd 1c       	adc	r13, r13
     c58:	cc 0c       	add	r12, r12
     c5a:	dd 1c       	adc	r13, r13
     c5c:	6c 0d       	add	r22, r12
     c5e:	7d 1d       	adc	r23, r13
     c60:	61 50       	subi	r22, 0x01	; 1
     c62:	71 09       	sbc	r23, r1
     c64:	0a f4       	brpl	.+2      	; 0xc68 <ili9341_drawchar+0x90>
     c66:	78 c0       	rjmp	.+240    	; 0xd58 <ili9341_drawchar+0x180>
     c68:	eb 82       	std	Y+3, r14	; 0x03
     c6a:	1c 87       	std	Y+12, r17	; 0x0c
     c6c:	0b 87       	std	Y+11, r16	; 0x0b
     c6e:	49 01       	movw	r8, r18
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	9a 01       	movw	r18, r20
     c74:	22 0f       	add	r18, r18
     c76:	33 1f       	adc	r19, r19
     c78:	22 0f       	add	r18, r18
     c7a:	33 1f       	adc	r19, r19
     c7c:	42 0f       	add	r20, r18
     c7e:	53 1f       	adc	r21, r19
     c80:	ae 2c       	mov	r10, r14
     c82:	b1 2c       	mov	r11, r1
     c84:	2c 01       	movw	r4, r24
     c86:	1c 01       	movw	r2, r24
     c88:	e1 2c       	mov	r14, r1
     c8a:	6a 01       	movw	r12, r20
     c8c:	c8 1a       	sub	r12, r24
     c8e:	d9 0a       	sbc	r13, r25
     c90:	da 86       	std	Y+10, r13	; 0x0a
     c92:	c9 86       	std	Y+9, r12	; 0x09
     c94:	6f 80       	ldd	r6, Y+7	; 0x07
     c96:	78 84       	ldd	r7, Y+8	; 0x08
     c98:	28 e0       	ldi	r18, 0x08	; 8
     c9a:	62 0e       	add	r6, r18
     c9c:	71 1c       	adc	r7, r1
     c9e:	ec 82       	std	Y+4, r14	; 0x04
     ca0:	2c 81       	ldd	r18, Y+4	; 0x04
     ca2:	25 30       	cpi	r18, 0x05	; 5
     ca4:	09 f4       	brne	.+2      	; 0xca8 <ili9341_drawchar+0xd0>
     ca6:	4d c0       	rjmp	.+154    	; 0xd42 <ili9341_drawchar+0x16a>
     ca8:	e9 85       	ldd	r30, Y+9	; 0x09
     caa:	fa 85       	ldd	r31, Y+10	; 0x0a
     cac:	e4 0d       	add	r30, r4
     cae:	f5 1d       	adc	r31, r5
     cb0:	e8 59       	subi	r30, 0x98	; 152
     cb2:	ff 4f       	sbci	r31, 0xFF	; 255
     cb4:	f4 90       	lpm	r15, Z
     cb6:	46 c0       	rjmp	.+140    	; 0xd44 <ili9341_drawchar+0x16c>
     cb8:	50 fe       	sbrs	r5, 0
     cba:	14 c0       	rjmp	.+40     	; 0xce4 <ili9341_drawchar+0x10c>
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	41 f4       	brne	.+16     	; 0xcd2 <ili9341_drawchar+0xfa>
     cc2:	a4 01       	movw	r20, r8
     cc4:	6d 85       	ldd	r22, Y+13	; 0x0d
     cc6:	7e 85       	ldd	r23, Y+14	; 0x0e
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
     cca:	9e 81       	ldd	r25, Y+6	; 0x06
     ccc:	0e 94 a4 04 	call	0x948	; 0x948 <ili9341_drawpixel>
     cd0:	1f c0       	rjmp	.+62     	; 0xd10 <ili9341_drawchar+0x138>
     cd2:	84 01       	movw	r16, r8
     cd4:	29 81       	ldd	r18, Y+1	; 0x01
     cd6:	3a 81       	ldd	r19, Y+2	; 0x02
     cd8:	a9 01       	movw	r20, r18
     cda:	b6 01       	movw	r22, r12
     cdc:	c1 01       	movw	r24, r2
     cde:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
     ce2:	16 c0       	rjmp	.+44     	; 0xd10 <ili9341_drawchar+0x138>
     ce4:	8e 14       	cp	r8, r14
     ce6:	9f 04       	cpc	r9, r15
     ce8:	99 f0       	breq	.+38     	; 0xd10 <ili9341_drawchar+0x138>
     cea:	9b 81       	ldd	r25, Y+3	; 0x03
     cec:	91 30       	cpi	r25, 0x01	; 1
     cee:	41 f4       	brne	.+16     	; 0xd00 <ili9341_drawchar+0x128>
     cf0:	a7 01       	movw	r20, r14
     cf2:	6d 85       	ldd	r22, Y+13	; 0x0d
     cf4:	7e 85       	ldd	r23, Y+14	; 0x0e
     cf6:	8d 81       	ldd	r24, Y+5	; 0x05
     cf8:	9e 81       	ldd	r25, Y+6	; 0x06
     cfa:	0e 94 a4 04 	call	0x948	; 0x948 <ili9341_drawpixel>
     cfe:	08 c0       	rjmp	.+16     	; 0xd10 <ili9341_drawchar+0x138>
     d00:	87 01       	movw	r16, r14
     d02:	29 81       	ldd	r18, Y+1	; 0x01
     d04:	3a 81       	ldd	r19, Y+2	; 0x02
     d06:	a9 01       	movw	r20, r18
     d08:	b6 01       	movw	r22, r12
     d0a:	c1 01       	movw	r24, r2
     d0c:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
     d10:	56 94       	lsr	r5
     d12:	ca 0c       	add	r12, r10
     d14:	db 1c       	adc	r13, r11
     d16:	ed 85       	ldd	r30, Y+13	; 0x0d
     d18:	fe 85       	ldd	r31, Y+14	; 0x0e
     d1a:	31 96       	adiw	r30, 0x01	; 1
     d1c:	fe 87       	std	Y+14, r31	; 0x0e
     d1e:	ed 87       	std	Y+13, r30	; 0x0d
     d20:	e6 15       	cp	r30, r6
     d22:	f7 05       	cpc	r31, r7
     d24:	49 f6       	brne	.-110    	; 0xcb8 <ili9341_drawchar+0xe0>
     d26:	4d 80       	ldd	r4, Y+5	; 0x05
     d28:	5e 80       	ldd	r5, Y+6	; 0x06
     d2a:	fc 81       	ldd	r31, Y+4	; 0x04
     d2c:	ff 5f       	subi	r31, 0xFF	; 255
     d2e:	fc 83       	std	Y+4, r31	; 0x04
     d30:	2a 0c       	add	r2, r10
     d32:	3b 1c       	adc	r3, r11
     d34:	2f ef       	ldi	r18, 0xFF	; 255
     d36:	42 1a       	sub	r4, r18
     d38:	52 0a       	sbc	r5, r18
     d3a:	f6 30       	cpi	r31, 0x06	; 6
     d3c:	09 f0       	breq	.+2      	; 0xd40 <ili9341_drawchar+0x168>
     d3e:	b0 cf       	rjmp	.-160    	; 0xca0 <ili9341_drawchar+0xc8>
     d40:	0b c0       	rjmp	.+22     	; 0xd58 <ili9341_drawchar+0x180>
     d42:	f1 2c       	mov	r15, r1
     d44:	cf 80       	ldd	r12, Y+7	; 0x07
     d46:	d8 84       	ldd	r13, Y+8	; 0x08
     d48:	de 86       	std	Y+14, r13	; 0x0e
     d4a:	cd 86       	std	Y+13, r12	; 0x0d
     d4c:	5e 82       	std	Y+6, r5	; 0x06
     d4e:	4d 82       	std	Y+5, r4	; 0x05
     d50:	5f 2c       	mov	r5, r15
     d52:	eb 84       	ldd	r14, Y+11	; 0x0b
     d54:	fc 84       	ldd	r15, Y+12	; 0x0c
     d56:	b0 cf       	rjmp	.-160    	; 0xcb8 <ili9341_drawchar+0xe0>
     d58:	2e 96       	adiw	r28, 0x0e	; 14
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	df 90       	pop	r13
     d72:	cf 90       	pop	r12
     d74:	bf 90       	pop	r11
     d76:	af 90       	pop	r10
     d78:	9f 90       	pop	r9
     d7a:	8f 90       	pop	r8
     d7c:	7f 90       	pop	r7
     d7e:	6f 90       	pop	r6
     d80:	5f 90       	pop	r5
     d82:	4f 90       	pop	r4
     d84:	3f 90       	pop	r3
     d86:	2f 90       	pop	r2
     d88:	08 95       	ret

00000d8a <ili9341_setcursor>:
     d8a:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <cursor_x+0x1>
     d8e:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <cursor_x>
     d92:	70 93 d5 01 	sts	0x01D5, r23	; 0x8001d5 <cursor_y+0x1>
     d96:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <cursor_y>
     d9a:	08 95       	ret

00000d9c <ili9341_settextcolour>:
     d9c:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <textcolour+0x1>
     da0:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <textcolour>
     da4:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <__data_end+0x1>
     da8:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <__data_end>
     dac:	08 95       	ret

00000dae <ili9341_settextsize>:
     dae:	89 30       	cpi	r24, 0x09	; 9
     db0:	28 f4       	brcc	.+10     	; 0xdbc <ili9341_settextsize+0xe>
     db2:	81 11       	cpse	r24, r1
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <ili9341_settextsize+0xa>
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <textsize>
     dbc:	08 95       	ret

00000dbe <ili9341_write>:
     dbe:	ef 92       	push	r14
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	8a 30       	cpi	r24, 0x0A	; 10
     dc6:	a1 f4       	brne	.+40     	; 0xdf0 <ili9341_write+0x32>
     dc8:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <textsize>
     dcc:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <cursor_y>
     dd0:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <cursor_y+0x1>
     dd4:	38 e0       	ldi	r19, 0x08	; 8
     dd6:	23 9f       	mul	r18, r19
     dd8:	80 0d       	add	r24, r0
     dda:	91 1d       	adc	r25, r1
     ddc:	11 24       	eor	r1, r1
     dde:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <cursor_y+0x1>
     de2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <cursor_y>
     de6:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <cursor_x+0x1>
     dea:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <cursor_x>
     dee:	2c c0       	rjmp	.+88     	; 0xe48 <ili9341_write+0x8a>
     df0:	8d 30       	cpi	r24, 0x0D	; 13
     df2:	51 f1       	breq	.+84     	; 0xe48 <ili9341_write+0x8a>
     df4:	48 2f       	mov	r20, r24
     df6:	e0 90 e8 01 	lds	r14, 0x01E8	; 0x8001e8 <textsize>
     dfa:	00 91 d2 01 	lds	r16, 0x01D2	; 0x8001d2 <__data_end>
     dfe:	10 91 d3 01 	lds	r17, 0x01D3	; 0x8001d3 <__data_end+0x1>
     e02:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <textcolour>
     e06:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <textcolour+0x1>
     e0a:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <cursor_y>
     e0e:	70 91 d5 01 	lds	r23, 0x01D5	; 0x8001d5 <cursor_y+0x1>
     e12:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <cursor_x>
     e16:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <cursor_x+0x1>
     e1a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <ili9341_drawchar>
     e1e:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <textsize>
     e22:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <cursor_x>
     e26:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <cursor_x+0x1>
     e2a:	89 2f       	mov	r24, r25
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	ac 01       	movw	r20, r24
     e30:	44 0f       	add	r20, r20
     e32:	55 1f       	adc	r21, r21
     e34:	84 0f       	add	r24, r20
     e36:	95 1f       	adc	r25, r21
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	82 0f       	add	r24, r18
     e3e:	93 1f       	adc	r25, r19
     e40:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <cursor_x+0x1>
     e44:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <cursor_x>
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ef 90       	pop	r14
     e4e:	08 95       	ret

00000e50 <ili9341_putchar_printf>:
     e50:	0e 94 df 06 	call	0xdbe	; 0xdbe <ili9341_write>
     e54:	08 95       	ret

00000e56 <ReadADC>:
}

uint16_t ReadADC(uint8_t ADCchannel)
{
	//Select the ADC channel entered
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
     e56:	ec e7       	ldi	r30, 0x7C	; 124
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	90 81       	ld	r25, Z
     e5c:	90 7f       	andi	r25, 0xF0	; 240
     e5e:	8f 70       	andi	r24, 0x0F	; 15
     e60:	89 2b       	or	r24, r25
     e62:	80 83       	st	Z, r24
	//Starting the conversion
	ADCSRA |= (1<<ADSC);
     e64:	ea e7       	ldi	r30, 0x7A	; 122
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 64       	ori	r24, 0x40	; 64
     e6c:	80 83       	st	Z, r24
	//Waiting until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
     e6e:	80 81       	ld	r24, Z
     e70:	86 fd       	sbrc	r24, 6
     e72:	fd cf       	rjmp	.-6      	; 0xe6e <ReadADC+0x18>
	return ADC;
     e74:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     e78:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     e7c:	08 95       	ret

00000e7e <DRAW_GRID>:

void DRAW_GRID ()
{
	
	ili9341_drawhline(1,80,240,WHITE);
     e7e:	2f ef       	ldi	r18, 0xFF	; 255
     e80:	3f ef       	ldi	r19, 0xFF	; 255
     e82:	40 ef       	ldi	r20, 0xF0	; 240
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	60 e5       	ldi	r22, 0x50	; 80
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <ili9341_drawhline>
	ili9341_drawhline(1,81,240,WHITE);
     e92:	2f ef       	ldi	r18, 0xFF	; 255
     e94:	3f ef       	ldi	r19, 0xFF	; 255
     e96:	40 ef       	ldi	r20, 0xF0	; 240
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	61 e5       	ldi	r22, 0x51	; 81
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 fd 04 	call	0x9fa	; 0x9fa <ili9341_drawhline>
	ili9341_drawhline(1,79,240,WHITE);
     ea6:	2f ef       	ldi	r18, 0xFF	; 255
     ea8:	3f ef       	ldi	r19, 0xFF	; 255
     eaa:	40 ef       	ldi	r20, 0xF0	; 240
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	6f e4       	ldi	r22, 0x4F	; 79
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <ili9341_drawhline>
	
	ili9341_drawhline(1,160,240,WHITE);
     eba:	2f ef       	ldi	r18, 0xFF	; 255
     ebc:	3f ef       	ldi	r19, 0xFF	; 255
     ebe:	40 ef       	ldi	r20, 0xF0	; 240
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	60 ea       	ldi	r22, 0xA0	; 160
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 fd 04 	call	0x9fa	; 0x9fa <ili9341_drawhline>
	ili9341_drawhline(1,159,240,WHITE);
     ece:	2f ef       	ldi	r18, 0xFF	; 255
     ed0:	3f ef       	ldi	r19, 0xFF	; 255
     ed2:	40 ef       	ldi	r20, 0xF0	; 240
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	6f e9       	ldi	r22, 0x9F	; 159
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 fd 04 	call	0x9fa	; 0x9fa <ili9341_drawhline>
	ili9341_drawhline(1,161,240,WHITE);
     ee2:	2f ef       	ldi	r18, 0xFF	; 255
     ee4:	3f ef       	ldi	r19, 0xFF	; 255
     ee6:	40 ef       	ldi	r20, 0xF0	; 240
     ee8:	50 e0       	ldi	r21, 0x00	; 0
     eea:	61 ea       	ldi	r22, 0xA1	; 161
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 fd 04 	call	0x9fa	; 0x9fa <ili9341_drawhline>
	
	ili9341_drawvline(80,1,240,WHITE);
     ef6:	2f ef       	ldi	r18, 0xFF	; 255
     ef8:	3f ef       	ldi	r19, 0xFF	; 255
     efa:	40 ef       	ldi	r20, 0xF0	; 240
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	80 e5       	ldi	r24, 0x50	; 80
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 c3 04 	call	0x986	; 0x986 <ili9341_drawvline>
	ili9341_drawvline(81,1,240,WHITE);
     f0a:	2f ef       	ldi	r18, 0xFF	; 255
     f0c:	3f ef       	ldi	r19, 0xFF	; 255
     f0e:	40 ef       	ldi	r20, 0xF0	; 240
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	81 e5       	ldi	r24, 0x51	; 81
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 c3 04 	call	0x986	; 0x986 <ili9341_drawvline>
	ili9341_drawvline(79,1,240,WHITE);
     f1e:	2f ef       	ldi	r18, 0xFF	; 255
     f20:	3f ef       	ldi	r19, 0xFF	; 255
     f22:	40 ef       	ldi	r20, 0xF0	; 240
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	8f e4       	ldi	r24, 0x4F	; 79
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 c3 04 	call	0x986	; 0x986 <ili9341_drawvline>
	
	ili9341_drawvline(160,1,240,WHITE);
     f32:	2f ef       	ldi	r18, 0xFF	; 255
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	40 ef       	ldi	r20, 0xF0	; 240
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	80 ea       	ldi	r24, 0xA0	; 160
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 c3 04 	call	0x986	; 0x986 <ili9341_drawvline>
	ili9341_drawvline(161,1,240,WHITE);
     f46:	2f ef       	ldi	r18, 0xFF	; 255
     f48:	3f ef       	ldi	r19, 0xFF	; 255
     f4a:	40 ef       	ldi	r20, 0xF0	; 240
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	81 ea       	ldi	r24, 0xA1	; 161
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 c3 04 	call	0x986	; 0x986 <ili9341_drawvline>
	ili9341_drawvline(159,1,240,WHITE);
     f5a:	2f ef       	ldi	r18, 0xFF	; 255
     f5c:	3f ef       	ldi	r19, 0xFF	; 255
     f5e:	40 ef       	ldi	r20, 0xF0	; 240
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	8f e9       	ldi	r24, 0x9F	; 159
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 c3 04 	call	0x986	; 0x986 <ili9341_drawvline>
	
	ili9341_drawvline(240,1,240,WHITE);
     f6e:	2f ef       	ldi	r18, 0xFF	; 255
     f70:	3f ef       	ldi	r19, 0xFF	; 255
     f72:	40 ef       	ldi	r20, 0xF0	; 240
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	80 ef       	ldi	r24, 0xF0	; 240
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 c3 04 	call	0x986	; 0x986 <ili9341_drawvline>
	ili9341_drawvline(239,1,240,WHITE);
     f82:	2f ef       	ldi	r18, 0xFF	; 255
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	40 ef       	ldi	r20, 0xF0	; 240
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	8f ee       	ldi	r24, 0xEF	; 239
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 c3 04 	call	0x986	; 0x986 <ili9341_drawvline>
	ili9341_drawvline(241,1,240,WHITE);
     f96:	2f ef       	ldi	r18, 0xFF	; 255
     f98:	3f ef       	ldi	r19, 0xFF	; 255
     f9a:	40 ef       	ldi	r20, 0xF0	; 240
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	81 ef       	ldi	r24, 0xF1	; 241
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 c3 04 	call	0x986	; 0x986 <ili9341_drawvline>
     faa:	08 95       	ret

00000fac <DRAW_X>:
}

void DRAW_X (uint16_t x1,uint16_t y1)
{
	ili9341_setcursor(x1,y1);
     fac:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
     fb0:	8f e9       	ldi	r24, 0x9F	; 159
     fb2:	9f e0       	ldi	r25, 0x0F	; 15
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <DRAW_X+0x8>
     fb8:	00 c0       	rjmp	.+0      	; 0xfba <DRAW_X+0xe>
     fba:	00 00       	nop
	_delay_ms(2);
	ili9341_settextcolour(RED,BLACK);
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	98 ef       	ldi	r25, 0xF8	; 248
     fc4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
     fc8:	8f e9       	ldi	r24, 0x9F	; 159
     fca:	9f e0       	ldi	r25, 0x0F	; 15
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	f1 f7       	brne	.-4      	; 0xfcc <DRAW_X+0x20>
     fd0:	00 c0       	rjmp	.+0      	; 0xfd2 <DRAW_X+0x26>
     fd2:	00 00       	nop
	_delay_ms(2);
	ili9341_settextsize(8);
     fd4:	88 e0       	ldi	r24, 0x08	; 8
     fd6:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
     fda:	8f e9       	ldi	r24, 0x9F	; 159
     fdc:	9f e0       	ldi	r25, 0x0F	; 15
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <DRAW_X+0x32>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <DRAW_X+0x38>
     fe4:	00 00       	nop
	_delay_ms(2);
	printf("X");
     fe6:	88 e5       	ldi	r24, 0x58	; 88
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 24 10 	call	0x2048	; 0x2048 <putchar>
     fee:	8f e9       	ldi	r24, 0x9F	; 159
     ff0:	9f e0       	ldi	r25, 0x0F	; 15
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <DRAW_X+0x46>
     ff6:	00 c0       	rjmp	.+0      	; 0xff8 <DRAW_X+0x4c>
     ff8:	00 00       	nop
     ffa:	08 95       	ret

00000ffc <DRAW_O>:
	_delay_ms(2);
}

void DRAW_O (uint16_t x2,uint16_t y2)
{
	ili9341_setcursor(x2,y2);
     ffc:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
    1000:	8f e9       	ldi	r24, 0x9F	; 159
    1002:	9f e0       	ldi	r25, 0x0F	; 15
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <DRAW_O+0x8>
    1008:	00 c0       	rjmp	.+0      	; 0x100a <DRAW_O+0xe>
    100a:	00 00       	nop
	_delay_ms(2);
	ili9341_settextcolour(GREEN,BLACK);
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	80 ee       	ldi	r24, 0xE0	; 224
    1012:	97 e0       	ldi	r25, 0x07	; 7
    1014:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
    1018:	8f e9       	ldi	r24, 0x9F	; 159
    101a:	9f e0       	ldi	r25, 0x0F	; 15
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <DRAW_O+0x20>
    1020:	00 c0       	rjmp	.+0      	; 0x1022 <DRAW_O+0x26>
    1022:	00 00       	nop
	_delay_ms(2);
	ili9341_settextsize(8);
    1024:	88 e0       	ldi	r24, 0x08	; 8
    1026:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
    102a:	8f e9       	ldi	r24, 0x9F	; 159
    102c:	9f e0       	ldi	r25, 0x0F	; 15
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <DRAW_O+0x32>
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <DRAW_O+0x38>
    1034:	00 00       	nop
	_delay_ms(2);
	printf("O");
    1036:	8f e4       	ldi	r24, 0x4F	; 79
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 24 10 	call	0x2048	; 0x2048 <putchar>
    103e:	8f e9       	ldi	r24, 0x9F	; 159
    1040:	9f e0       	ldi	r25, 0x0F	; 15
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <DRAW_O+0x46>
    1046:	00 c0       	rjmp	.+0      	; 0x1048 <DRAW_O+0x4c>
    1048:	00 00       	nop
    104a:	08 95       	ret

0000104c <DRAW_TURN>:
	_delay_ms(2);
}

void DRAW_TURN(int b[9])
{
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	8c 01       	movw	r16, r24
	for (int i = 0; i < 9; i++)
    1056:	c0 e0       	ldi	r28, 0x00	; 0
    1058:	d0 e0       	ldi	r29, 0x00	; 0
	{
		switch(b[i]) {
    105a:	f8 01       	movw	r30, r16
    105c:	81 91       	ld	r24, Z+
    105e:	91 91       	ld	r25, Z+
    1060:	8f 01       	movw	r16, r30
    1062:	8f 3f       	cpi	r24, 0xFF	; 255
    1064:	ff ef       	ldi	r31, 0xFF	; 255
    1066:	9f 07       	cpc	r25, r31
    1068:	81 f0       	breq	.+32     	; 0x108a <DRAW_TURN+0x3e>
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	d9 f4       	brne	.+54     	; 0x10a4 <DRAW_TURN+0x58>
			case 1:
			DRAW_O (Array_of_cells[i][0],Array_of_cells[i][1]);
    106e:	fe 01       	movw	r30, r28
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	ee 5e       	subi	r30, 0xEE	; 238
    107a:	fe 4f       	sbci	r31, 0xFE	; 254
    107c:	62 81       	ldd	r22, Z+2	; 0x02
    107e:	73 81       	ldd	r23, Z+3	; 0x03
    1080:	80 81       	ld	r24, Z
    1082:	91 81       	ldd	r25, Z+1	; 0x01
    1084:	0e 94 fe 07 	call	0xffc	; 0xffc <DRAW_O>
			break;
    1088:	0d c0       	rjmp	.+26     	; 0x10a4 <DRAW_TURN+0x58>
			case 0:
			break;
			case -1:
			DRAW_X (Array_of_cells[i][0],Array_of_cells[i][1]);
    108a:	fe 01       	movw	r30, r28
    108c:	ee 0f       	add	r30, r30
    108e:	ff 1f       	adc	r31, r31
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	ee 5e       	subi	r30, 0xEE	; 238
    1096:	fe 4f       	sbci	r31, 0xFE	; 254
    1098:	62 81       	ldd	r22, Z+2	; 0x02
    109a:	73 81       	ldd	r23, Z+3	; 0x03
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	0e 94 d6 07 	call	0xfac	; 0xfac <DRAW_X>
	_delay_ms(2);
}

void DRAW_TURN(int b[9])
{
	for (int i = 0; i < 9; i++)
    10a4:	21 96       	adiw	r28, 0x01	; 1
    10a6:	c9 30       	cpi	r28, 0x09	; 9
    10a8:	d1 05       	cpc	r29, r1
    10aa:	b9 f6       	brne	.-82     	; 0x105a <DRAW_TURN+0xe>
			case -1:
			DRAW_X (Array_of_cells[i][0],Array_of_cells[i][1]);
			break;
		}
	}
}
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	08 95       	ret

000010b6 <win>:


int win(const int board[9]) {
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	e0 97       	sbiw	r28, 0x30	; 48
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
	//determines if a player has won, returns 0 otherwise.
	unsigned wins[8][3] = {{0,1,2},{3,4,5},{6,7,8},{0,3,6},{1,4,7},{2,5,8},{0,4,8},{2,4,6}};
    10ca:	20 e3       	ldi	r18, 0x30	; 48
    10cc:	e6 e3       	ldi	r30, 0x36	; 54
    10ce:	f1 e0       	ldi	r31, 0x01	; 1
    10d0:	de 01       	movw	r26, r28
    10d2:	11 96       	adiw	r26, 0x01	; 1
    10d4:	01 90       	ld	r0, Z+
    10d6:	0d 92       	st	X+, r0
    10d8:	2a 95       	dec	r18
    10da:	e1 f7       	brne	.-8      	; 0x10d4 <win+0x1e>
    10dc:	fe 01       	movw	r30, r28
    10de:	31 96       	adiw	r30, 0x01	; 1
    10e0:	ae 01       	movw	r20, r28
    10e2:	4f 5c       	subi	r20, 0xCF	; 207
    10e4:	5f 4f       	sbci	r21, 0xFF	; 255
	int i;
	for(i = 0; i < 8; ++i) {
		if(board[wins[i][0]] != 0 && board[wins[i][0]] == board[wins[i][1]] && board[wins[i][0]] == board[wins[i][2]])
    10e6:	a0 81       	ld	r26, Z
    10e8:	b1 81       	ldd	r27, Z+1	; 0x01
    10ea:	aa 0f       	add	r26, r26
    10ec:	bb 1f       	adc	r27, r27
    10ee:	a8 0f       	add	r26, r24
    10f0:	b9 1f       	adc	r27, r25
    10f2:	6d 91       	ld	r22, X+
    10f4:	7c 91       	ld	r23, X
    10f6:	61 15       	cp	r22, r1
    10f8:	71 05       	cpc	r23, r1
    10fa:	c1 f0       	breq	.+48     	; 0x112c <win+0x76>
    10fc:	a2 81       	ldd	r26, Z+2	; 0x02
    10fe:	b3 81       	ldd	r27, Z+3	; 0x03
    1100:	aa 0f       	add	r26, r26
    1102:	bb 1f       	adc	r27, r27
    1104:	a8 0f       	add	r26, r24
    1106:	b9 1f       	adc	r27, r25
    1108:	0d 90       	ld	r0, X+
    110a:	bc 91       	ld	r27, X
    110c:	a0 2d       	mov	r26, r0
    110e:	6a 17       	cp	r22, r26
    1110:	7b 07       	cpc	r23, r27
    1112:	61 f4       	brne	.+24     	; 0x112c <win+0x76>
    1114:	24 81       	ldd	r18, Z+4	; 0x04
    1116:	35 81       	ldd	r19, Z+5	; 0x05
    1118:	d9 01       	movw	r26, r18
    111a:	aa 0f       	add	r26, r26
    111c:	bb 1f       	adc	r27, r27
    111e:	a8 0f       	add	r26, r24
    1120:	b9 1f       	adc	r27, r25
    1122:	2d 91       	ld	r18, X+
    1124:	3c 91       	ld	r19, X
    1126:	62 17       	cp	r22, r18
    1128:	73 07       	cpc	r23, r19
    112a:	31 f0       	breq	.+12     	; 0x1138 <win+0x82>
    112c:	36 96       	adiw	r30, 0x06	; 6

int win(const int board[9]) {
	//determines if a player has won, returns 0 otherwise.
	unsigned wins[8][3] = {{0,1,2},{3,4,5},{6,7,8},{0,3,6},{1,4,7},{2,5,8},{0,4,8},{2,4,6}};
	int i;
	for(i = 0; i < 8; ++i) {
    112e:	e4 17       	cp	r30, r20
    1130:	f5 07       	cpc	r31, r21
    1132:	c9 f6       	brne	.-78     	; 0x10e6 <win+0x30>
		if(board[wins[i][0]] != 0 && board[wins[i][0]] == board[wins[i][1]] && board[wins[i][0]] == board[wins[i][2]])
		return board[wins[i][2]];
	}
	return 0;
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
}
    1138:	c9 01       	movw	r24, r18
    113a:	e0 96       	adiw	r28, 0x30	; 48
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <minimax>:

int minimax(int board[9], int player) {
    114c:	4f 92       	push	r4
    114e:	5f 92       	push	r5
    1150:	6f 92       	push	r6
    1152:	7f 92       	push	r7
    1154:	8f 92       	push	r8
    1156:	9f 92       	push	r9
    1158:	af 92       	push	r10
    115a:	bf 92       	push	r11
    115c:	cf 92       	push	r12
    115e:	df 92       	push	r13
    1160:	ef 92       	push	r14
    1162:	ff 92       	push	r15
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	48 2e       	mov	r4, r24
    116e:	59 2e       	mov	r5, r25
    1170:	6b 01       	movw	r12, r22
	//How is the position like for player (their turn) on board?
	int winner = win(board);
    1172:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <win>
	if(winner != 0) return winner*player;
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	41 f0       	breq	.+16     	; 0x118a <minimax+0x3e>
    117a:	8c 9d       	mul	r24, r12
    117c:	70 01       	movw	r14, r0
    117e:	8d 9d       	mul	r24, r13
    1180:	f0 0c       	add	r15, r0
    1182:	9c 9d       	mul	r25, r12
    1184:	f0 0c       	add	r15, r0
    1186:	11 24       	eor	r1, r1
    1188:	35 c0       	rjmp	.+106    	; 0x11f4 <minimax+0xa8>
    118a:	c4 2d       	mov	r28, r4
    118c:	d5 2d       	mov	r29, r5
    118e:	81 2c       	mov	r8, r1
    1190:	91 2c       	mov	r9, r1
    1192:	0f 2e       	mov	r0, r31
    1194:	fe ef       	ldi	r31, 0xFE	; 254
    1196:	ef 2e       	mov	r14, r31
    1198:	ff 24       	eor	r15, r15
    119a:	fa 94       	dec	r15
    119c:	f0 2d       	mov	r31, r0
    119e:	aa 24       	eor	r10, r10
    11a0:	aa 94       	dec	r10
    11a2:	ba 2c       	mov	r11, r10
	int score = -2;//Losing moves are preferred to no move
	int i;
	for(i = 0; i < 9; ++i) {//For all moves,
		if(board[i] == 0) {//If legal,
			board[i] = player;//Try the move
			int thisScore = -minimax(board, player*-1);
    11a4:	66 24       	eor	r6, r6
    11a6:	77 24       	eor	r7, r7
    11a8:	6c 18       	sub	r6, r12
    11aa:	7d 08       	sbc	r7, r13
    11ac:	8e 01       	movw	r16, r28
	int move;
	move = -1;
	int score = -2;//Losing moves are preferred to no move
	int i;
	for(i = 0; i < 9; ++i) {//For all moves,
		if(board[i] == 0) {//If legal,
    11ae:	88 81       	ld	r24, Y
    11b0:	99 81       	ldd	r25, Y+1	; 0x01
    11b2:	89 2b       	or	r24, r25
    11b4:	91 f4       	brne	.+36     	; 0x11da <minimax+0x8e>
			board[i] = player;//Try the move
    11b6:	d9 82       	std	Y+1, r13	; 0x01
    11b8:	c8 82       	st	Y, r12
			int thisScore = -minimax(board, player*-1);
    11ba:	b3 01       	movw	r22, r6
    11bc:	84 2d       	mov	r24, r4
    11be:	95 2d       	mov	r25, r5
    11c0:	0e 94 a6 08 	call	0x114c	; 0x114c <minimax>
    11c4:	91 95       	neg	r25
    11c6:	81 95       	neg	r24
    11c8:	91 09       	sbc	r25, r1
			if(thisScore > score) {
    11ca:	e8 16       	cp	r14, r24
    11cc:	f9 06       	cpc	r15, r25
    11ce:	14 f4       	brge	.+4      	; 0x11d4 <minimax+0x88>
				score = thisScore;
    11d0:	7c 01       	movw	r14, r24
	int i;
	for(i = 0; i < 9; ++i) {//For all moves,
		if(board[i] == 0) {//If legal,
			board[i] = player;//Try the move
			int thisScore = -minimax(board, player*-1);
			if(thisScore > score) {
    11d2:	54 01       	movw	r10, r8
				score = thisScore;
				move = i;
			}//Pick the one that's worst for the opponent
			board[i] = 0;//Reset board after try
    11d4:	f8 01       	movw	r30, r16
    11d6:	11 82       	std	Z+1, r1	; 0x01
    11d8:	10 82       	st	Z, r1
	if(winner != 0) return winner*player;
	int move;
	move = -1;
	int score = -2;//Losing moves are preferred to no move
	int i;
	for(i = 0; i < 9; ++i) {//For all moves,
    11da:	ff ef       	ldi	r31, 0xFF	; 255
    11dc:	8f 1a       	sub	r8, r31
    11de:	9f 0a       	sbc	r9, r31
    11e0:	22 96       	adiw	r28, 0x02	; 2
    11e2:	89 e0       	ldi	r24, 0x09	; 9
    11e4:	88 16       	cp	r8, r24
    11e6:	91 04       	cpc	r9, r1
    11e8:	09 f7       	brne	.-62     	; 0x11ac <minimax+0x60>
				move = i;
			}//Pick the one that's worst for the opponent
			board[i] = 0;//Reset board after try
		}
	}
	if(move == -1) return 0;
    11ea:	ab 20       	and	r10, r11
    11ec:	a0 94       	com	r10
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <minimax+0xa8>
    11f0:	e1 2c       	mov	r14, r1
    11f2:	f1 2c       	mov	r15, r1
	return score;
}
    11f4:	c7 01       	movw	r24, r14
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	bf 90       	pop	r11
    1208:	af 90       	pop	r10
    120a:	9f 90       	pop	r9
    120c:	8f 90       	pop	r8
    120e:	7f 90       	pop	r7
    1210:	6f 90       	pop	r6
    1212:	5f 90       	pop	r5
    1214:	4f 90       	pop	r4
    1216:	08 95       	ret

00001218 <computerMove>:

void computerMove(int board[9]) {
    1218:	8f 92       	push	r8
    121a:	9f 92       	push	r9
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	7c 01       	movw	r14, r24
    1232:	ec 01       	movw	r28, r24
	int move = -1;
	int score = -2;
	int i;
	for(i = 0; i < 9; ++i) {
    1234:	81 2c       	mov	r8, r1
    1236:	91 2c       	mov	r9, r1
	return score;
}

void computerMove(int board[9]) {
	int move = -1;
	int score = -2;
    1238:	0f 2e       	mov	r0, r31
    123a:	fe ef       	ldi	r31, 0xFE	; 254
    123c:	cf 2e       	mov	r12, r31
    123e:	dd 24       	eor	r13, r13
    1240:	da 94       	dec	r13
    1242:	f0 2d       	mov	r31, r0
	if(move == -1) return 0;
	return score;
}

void computerMove(int board[9]) {
	int move = -1;
    1244:	0f ef       	ldi	r16, 0xFF	; 255
    1246:	1f ef       	ldi	r17, 0xFF	; 255
	int score = -2;
	int i;
	for(i = 0; i < 9; ++i) {
		if(board[i] == 0) {
			board[i] = 1;
    1248:	aa 24       	eor	r10, r10
    124a:	a3 94       	inc	r10
    124c:	b1 2c       	mov	r11, r1
void computerMove(int board[9]) {
	int move = -1;
	int score = -2;
	int i;
	for(i = 0; i < 9; ++i) {
		if(board[i] == 0) {
    124e:	88 81       	ld	r24, Y
    1250:	99 81       	ldd	r25, Y+1	; 0x01
    1252:	89 2b       	or	r24, r25
    1254:	89 f4       	brne	.+34     	; 0x1278 <computerMove+0x60>
			board[i] = 1;
    1256:	b9 82       	std	Y+1, r11	; 0x01
    1258:	a8 82       	st	Y, r10
			int tempScore = -minimax(board, -1);
    125a:	6f ef       	ldi	r22, 0xFF	; 255
    125c:	7f ef       	ldi	r23, 0xFF	; 255
    125e:	c7 01       	movw	r24, r14
    1260:	0e 94 a6 08 	call	0x114c	; 0x114c <minimax>
    1264:	91 95       	neg	r25
    1266:	81 95       	neg	r24
    1268:	91 09       	sbc	r25, r1
			board[i] = 0;
    126a:	19 82       	std	Y+1, r1	; 0x01
    126c:	18 82       	st	Y, r1
			if(tempScore > score) {
    126e:	c8 16       	cp	r12, r24
    1270:	d9 06       	cpc	r13, r25
    1272:	14 f4       	brge	.+4      	; 0x1278 <computerMove+0x60>
				score = tempScore;
    1274:	6c 01       	movw	r12, r24
	for(i = 0; i < 9; ++i) {
		if(board[i] == 0) {
			board[i] = 1;
			int tempScore = -minimax(board, -1);
			board[i] = 0;
			if(tempScore > score) {
    1276:	84 01       	movw	r16, r8

void computerMove(int board[9]) {
	int move = -1;
	int score = -2;
	int i;
	for(i = 0; i < 9; ++i) {
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	88 1a       	sub	r8, r24
    127c:	98 0a       	sbc	r9, r24
    127e:	22 96       	adiw	r28, 0x02	; 2
    1280:	89 e0       	ldi	r24, 0x09	; 9
    1282:	88 16       	cp	r8, r24
    1284:	91 04       	cpc	r9, r1
    1286:	19 f7       	brne	.-58     	; 0x124e <computerMove+0x36>
				move = i;
			}
		}
	}
	//returns a score based on minimax tree at a given node.
	board[move] = 1;
    1288:	00 0f       	add	r16, r16
    128a:	11 1f       	adc	r17, r17
    128c:	f7 01       	movw	r30, r14
    128e:	e0 0f       	add	r30, r16
    1290:	f1 1f       	adc	r31, r17
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	91 83       	std	Z+1, r25	; 0x01
    1298:	80 83       	st	Z, r24
}
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
    12a8:	cf 90       	pop	r12
    12aa:	bf 90       	pop	r11
    12ac:	af 90       	pop	r10
    12ae:	9f 90       	pop	r9
    12b0:	8f 90       	pop	r8
    12b2:	08 95       	ret

000012b4 <playerMove1>:

void playerMove1(int board[9], uint16_t positionX, uint16_t positionY) 
{
    12b4:	6f 92       	push	r6
    12b6:	7f 92       	push	r7
    12b8:	8f 92       	push	r8
    12ba:	9f 92       	push	r9
    12bc:	af 92       	push	r10
    12be:	bf 92       	push	r11
    12c0:	cf 92       	push	r12
    12c2:	df 92       	push	r13
    12c4:	ef 92       	push	r14
    12c6:	ff 92       	push	r15
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	5c 01       	movw	r10, r24
    12d2:	eb 01       	movw	r28, r22
    12d4:	7a 01       	movw	r14, r20
	ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
    12d6:	ba 01       	movw	r22, r20
    12d8:	67 50       	subi	r22, 0x07	; 7
    12da:	71 09       	sbc	r23, r1
    12dc:	0f e1       	ldi	r16, 0x1F	; 31
    12de:	10 e0       	ldi	r17, 0x00	; 0
    12e0:	2a e0       	ldi	r18, 0x0A	; 10
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	41 e1       	ldi	r20, 0x11	; 17
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	ce 01       	movw	r24, r28
    12ea:	41 97       	sbiw	r24, 0x11	; 17
    12ec:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <playerMove1+0x40>
    12f2:	6c 01       	movw	r12, r24
	int move;
	do
	{
		restart:
		if(ReadADC(X_AXIS) > 900 && (positionY < 160))
    12f4:	85 e0       	ldi	r24, 0x05	; 5
    12f6:	0e 94 2b 07 	call	0xe56	; 0xe56 <ReadADC>
    12fa:	85 38       	cpi	r24, 0x85	; 133
    12fc:	93 40       	sbci	r25, 0x03	; 3
    12fe:	28 f1       	brcs	.+74     	; 0x134a <playerMove1+0x96>
    1300:	80 ea       	ldi	r24, 0xA0	; 160
    1302:	e8 16       	cp	r14, r24
    1304:	f1 04       	cpc	r15, r1
    1306:	08 f5       	brcc	.+66     	; 0x134a <playerMove1+0x96>
		{
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
    1308:	b7 01       	movw	r22, r14
    130a:	67 50       	subi	r22, 0x07	; 7
    130c:	71 09       	sbc	r23, r1
    130e:	00 e0       	ldi	r16, 0x00	; 0
    1310:	10 e0       	ldi	r17, 0x00	; 0
    1312:	2a e0       	ldi	r18, 0x0A	; 10
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	41 e1       	ldi	r20, 0x11	; 17
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	4e 01       	movw	r8, r28
    131c:	91 e1       	ldi	r25, 0x11	; 17
    131e:	89 1a       	sub	r8, r25
    1320:	91 08       	sbc	r9, r1
    1322:	c4 01       	movw	r24, r8
    1324:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
		positionY += 80;
    1328:	37 01       	movw	r6, r14
    132a:	20 e5       	ldi	r18, 0x50	; 80
    132c:	62 0e       	add	r6, r18
    132e:	71 1c       	adc	r7, r1
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
    1330:	b7 01       	movw	r22, r14
    1332:	67 5b       	subi	r22, 0xB7	; 183
    1334:	7f 4f       	sbci	r23, 0xFF	; 255
    1336:	0f e1       	ldi	r16, 0x1F	; 31
    1338:	10 e0       	ldi	r17, 0x00	; 0
    133a:	2a e0       	ldi	r18, 0x0A	; 10
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	41 e1       	ldi	r20, 0x11	; 17
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	c4 01       	movw	r24, r8
    1344:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
	{
		restart:
		if(ReadADC(X_AXIS) > 900 && (positionY < 160))
		{
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
		positionY += 80;
    1348:	73 01       	movw	r14, r6
    134a:	8f ef       	ldi	r24, 0xFF	; 255
    134c:	90 e7       	ldi	r25, 0x70	; 112
    134e:	22 e0       	ldi	r18, 0x02	; 2
    1350:	81 50       	subi	r24, 0x01	; 1
    1352:	90 40       	sbci	r25, 0x00	; 0
    1354:	20 40       	sbci	r18, 0x00	; 0
    1356:	e1 f7       	brne	.-8      	; 0x1350 <playerMove1+0x9c>
    1358:	00 c0       	rjmp	.+0      	; 0x135a <playerMove1+0xa6>
    135a:	00 00       	nop
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
		}
		_delay_ms(100);
	
		if(ReadADC(Y_AXIS) < 200 && (positionX < 160))
    135c:	84 e0       	ldi	r24, 0x04	; 4
    135e:	0e 94 2b 07 	call	0xe56	; 0xe56 <ReadADC>
    1362:	88 3c       	cpi	r24, 0xC8	; 200
    1364:	91 05       	cpc	r25, r1
    1366:	10 f5       	brcc	.+68     	; 0x13ac <playerMove1+0xf8>
    1368:	c0 3a       	cpi	r28, 0xA0	; 160
    136a:	d1 05       	cpc	r29, r1
    136c:	f8 f4       	brcc	.+62     	; 0x13ac <playerMove1+0xf8>
		{
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
    136e:	00 e0       	ldi	r16, 0x00	; 0
    1370:	10 e0       	ldi	r17, 0x00	; 0
    1372:	2a e0       	ldi	r18, 0x0A	; 10
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	41 e1       	ldi	r20, 0x11	; 17
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	37 01       	movw	r6, r14
    137c:	87 e0       	ldi	r24, 0x07	; 7
    137e:	68 1a       	sub	r6, r24
    1380:	71 08       	sbc	r7, r1
    1382:	b3 01       	movw	r22, r6
    1384:	ce 01       	movw	r24, r28
    1386:	41 97       	sbiw	r24, 0x11	; 17
    1388:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
		positionX += 80;
    138c:	4e 01       	movw	r8, r28
    138e:	90 e5       	ldi	r25, 0x50	; 80
    1390:	89 0e       	add	r8, r25
    1392:	91 1c       	adc	r9, r1
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
    1394:	0f e1       	ldi	r16, 0x1F	; 31
    1396:	10 e0       	ldi	r17, 0x00	; 0
    1398:	2a e0       	ldi	r18, 0x0A	; 10
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	41 e1       	ldi	r20, 0x11	; 17
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	b3 01       	movw	r22, r6
    13a2:	ce 01       	movw	r24, r28
    13a4:	cf 96       	adiw	r24, 0x3f	; 63
    13a6:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
		_delay_ms(100);
	
		if(ReadADC(Y_AXIS) < 200 && (positionX < 160))
		{
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
		positionX += 80;
    13aa:	e4 01       	movw	r28, r8
    13ac:	2f ef       	ldi	r18, 0xFF	; 255
    13ae:	80 e7       	ldi	r24, 0x70	; 112
    13b0:	92 e0       	ldi	r25, 0x02	; 2
    13b2:	21 50       	subi	r18, 0x01	; 1
    13b4:	80 40       	sbci	r24, 0x00	; 0
    13b6:	90 40       	sbci	r25, 0x00	; 0
    13b8:	e1 f7       	brne	.-8      	; 0x13b2 <playerMove1+0xfe>
    13ba:	00 c0       	rjmp	.+0      	; 0x13bc <playerMove1+0x108>
    13bc:	00 00       	nop
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
		}
		_delay_ms(100);
	
		if(ReadADC(X_AXIS) < 200 && (positionY > 80))
    13be:	85 e0       	ldi	r24, 0x05	; 5
    13c0:	0e 94 2b 07 	call	0xe56	; 0xe56 <ReadADC>
    13c4:	88 3c       	cpi	r24, 0xC8	; 200
    13c6:	91 05       	cpc	r25, r1
    13c8:	28 f5       	brcc	.+74     	; 0x1414 <playerMove1+0x160>
    13ca:	21 e5       	ldi	r18, 0x51	; 81
    13cc:	e2 16       	cp	r14, r18
    13ce:	f1 04       	cpc	r15, r1
    13d0:	08 f1       	brcs	.+66     	; 0x1414 <playerMove1+0x160>
		{
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
    13d2:	b7 01       	movw	r22, r14
    13d4:	67 50       	subi	r22, 0x07	; 7
    13d6:	71 09       	sbc	r23, r1
    13d8:	00 e0       	ldi	r16, 0x00	; 0
    13da:	10 e0       	ldi	r17, 0x00	; 0
    13dc:	2a e0       	ldi	r18, 0x0A	; 10
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	41 e1       	ldi	r20, 0x11	; 17
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	4e 01       	movw	r8, r28
    13e6:	81 e1       	ldi	r24, 0x11	; 17
    13e8:	88 1a       	sub	r8, r24
    13ea:	91 08       	sbc	r9, r1
    13ec:	c4 01       	movw	r24, r8
    13ee:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
		positionY -= 80;
    13f2:	37 01       	movw	r6, r14
    13f4:	90 e5       	ldi	r25, 0x50	; 80
    13f6:	69 1a       	sub	r6, r25
    13f8:	71 08       	sbc	r7, r1
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
    13fa:	b7 01       	movw	r22, r14
    13fc:	67 55       	subi	r22, 0x57	; 87
    13fe:	71 09       	sbc	r23, r1
    1400:	0f e1       	ldi	r16, 0x1F	; 31
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	2a e0       	ldi	r18, 0x0A	; 10
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	41 e1       	ldi	r20, 0x11	; 17
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	c4 01       	movw	r24, r8
    140e:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
		_delay_ms(100);
	
		if(ReadADC(X_AXIS) < 200 && (positionY > 80))
		{
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
		positionY -= 80;
    1412:	73 01       	movw	r14, r6
    1414:	2f ef       	ldi	r18, 0xFF	; 255
    1416:	80 e7       	ldi	r24, 0x70	; 112
    1418:	92 e0       	ldi	r25, 0x02	; 2
    141a:	21 50       	subi	r18, 0x01	; 1
    141c:	80 40       	sbci	r24, 0x00	; 0
    141e:	90 40       	sbci	r25, 0x00	; 0
    1420:	e1 f7       	brne	.-8      	; 0x141a <playerMove1+0x166>
    1422:	00 c0       	rjmp	.+0      	; 0x1424 <playerMove1+0x170>
    1424:	00 00       	nop
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
		}
		_delay_ms(100);
	
		if(ReadADC(Y_AXIS) > 900 && (positionX > 80))
    1426:	84 e0       	ldi	r24, 0x04	; 4
    1428:	0e 94 2b 07 	call	0xe56	; 0xe56 <ReadADC>
    142c:	85 38       	cpi	r24, 0x85	; 133
    142e:	93 40       	sbci	r25, 0x03	; 3
    1430:	08 f4       	brcc	.+2      	; 0x1434 <playerMove1+0x180>
    1432:	60 c0       	rjmp	.+192    	; 0x14f4 <playerMove1+0x240>
    1434:	c1 35       	cpi	r28, 0x51	; 81
    1436:	d1 05       	cpc	r29, r1
    1438:	08 f4       	brcc	.+2      	; 0x143c <playerMove1+0x188>
    143a:	5c c0       	rjmp	.+184    	; 0x14f4 <playerMove1+0x240>
		{
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
    143c:	00 e0       	ldi	r16, 0x00	; 0
    143e:	10 e0       	ldi	r17, 0x00	; 0
    1440:	2a e0       	ldi	r18, 0x0A	; 10
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	41 e1       	ldi	r20, 0x11	; 17
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	37 01       	movw	r6, r14
    144a:	87 e0       	ldi	r24, 0x07	; 7
    144c:	68 1a       	sub	r6, r24
    144e:	71 08       	sbc	r7, r1
    1450:	b3 01       	movw	r22, r6
    1452:	ce 01       	movw	r24, r28
    1454:	41 97       	sbiw	r24, 0x11	; 17
    1456:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
		positionX -= 80;
    145a:	4e 01       	movw	r8, r28
    145c:	90 e5       	ldi	r25, 0x50	; 80
    145e:	89 1a       	sub	r8, r25
    1460:	91 08       	sbc	r9, r1
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
    1462:	0f e1       	ldi	r16, 0x1F	; 31
    1464:	10 e0       	ldi	r17, 0x00	; 0
    1466:	2a e0       	ldi	r18, 0x0A	; 10
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	41 e1       	ldi	r20, 0x11	; 17
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	b3 01       	movw	r22, r6
    1470:	ce 01       	movw	r24, r28
    1472:	81 56       	subi	r24, 0x61	; 97
    1474:	91 09       	sbc	r25, r1
    1476:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
		_delay_ms(100);
	
		if(ReadADC(Y_AXIS) > 900 && (positionX > 80))
		{
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
		positionX -= 80;
    147a:	e4 01       	movw	r28, r8
    147c:	3b c0       	rjmp	.+118    	; 0x14f4 <playerMove1+0x240>

	} while((PIND & (1 << PIND6)));

	for (int i = 0; i < 9; i++)
	{
		if(positionX == Array_of_cells[i][0])
    147e:	fc 01       	movw	r30, r24
    1480:	ee 0f       	add	r30, r30
    1482:	ff 1f       	adc	r31, r31
    1484:	ee 0f       	add	r30, r30
    1486:	ff 1f       	adc	r31, r31
    1488:	ee 5e       	subi	r30, 0xEE	; 238
    148a:	fe 4f       	sbci	r31, 0xFE	; 254
    148c:	20 81       	ld	r18, Z
    148e:	31 81       	ldd	r19, Z+1	; 0x01
    1490:	2c 17       	cp	r18, r28
    1492:	3d 07       	cpc	r19, r29
    1494:	99 f4       	brne	.+38     	; 0x14bc <playerMove1+0x208>
		{
			if(positionY == Array_of_cells[i][1])
    1496:	fc 01       	movw	r30, r24
    1498:	ee 0f       	add	r30, r30
    149a:	ff 1f       	adc	r31, r31
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	ee 5e       	subi	r30, 0xEE	; 238
    14a2:	fe 4f       	sbci	r31, 0xFE	; 254
    14a4:	22 81       	ldd	r18, Z+2	; 0x02
    14a6:	33 81       	ldd	r19, Z+3	; 0x03
    14a8:	e2 16       	cp	r14, r18
    14aa:	f3 06       	cpc	r15, r19
    14ac:	39 f4       	brne	.+14     	; 0x14bc <playerMove1+0x208>
				{
					move = i;
					if(board[move]!= 0)
    14ae:	2d 91       	ld	r18, X+
    14b0:	3c 91       	ld	r19, X
    14b2:	11 97       	sbiw	r26, 0x01	; 1
    14b4:	23 2b       	or	r18, r19
    14b6:	09 f0       	breq	.+2      	; 0x14ba <playerMove1+0x206>
    14b8:	1c cf       	rjmp	.-456    	; 0x12f2 <playerMove1+0x3e>
    14ba:	6c 01       	movw	r12, r24
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
		}

	} while((PIND & (1 << PIND6)));

	for (int i = 0; i < 9; i++)
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	12 96       	adiw	r26, 0x02	; 2
    14c0:	89 30       	cpi	r24, 0x09	; 9
    14c2:	91 05       	cpc	r25, r1
    14c4:	e1 f6       	brne	.-72     	; 0x147e <playerMove1+0x1ca>
				}
			
		}
	}

	ili9341_fillrect(positionX-17,positionY-7,20,10,BLACK);
    14c6:	b7 01       	movw	r22, r14
    14c8:	67 50       	subi	r22, 0x07	; 7
    14ca:	71 09       	sbc	r23, r1
    14cc:	00 e0       	ldi	r16, 0x00	; 0
    14ce:	10 e0       	ldi	r17, 0x00	; 0
    14d0:	2a e0       	ldi	r18, 0x0A	; 10
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	44 e1       	ldi	r20, 0x14	; 20
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	ce 01       	movw	r24, r28
    14da:	41 97       	sbiw	r24, 0x11	; 17
    14dc:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
	board[move] = -1;
    14e0:	cc 0c       	add	r12, r12
    14e2:	dd 1c       	adc	r13, r13
    14e4:	f5 01       	movw	r30, r10
    14e6:	ec 0d       	add	r30, r12
    14e8:	fd 1d       	adc	r31, r13
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	9f ef       	ldi	r25, 0xFF	; 255
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	80 83       	st	Z, r24
	
}
    14f2:	06 c0       	rjmp	.+12     	; 0x1500 <playerMove1+0x24c>
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
		positionX -= 80;
		ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
		}

	} while((PIND & (1 << PIND6)));
    14f4:	4e 99       	sbic	0x09, 6	; 9
    14f6:	fe ce       	rjmp	.-516    	; 0x12f4 <playerMove1+0x40>
    14f8:	d5 01       	movw	r26, r10
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	bf cf       	rjmp	.-130    	; 0x147e <playerMove1+0x1ca>
	}

	ili9341_fillrect(positionX-17,positionY-7,20,10,BLACK);
	board[move] = -1;
	
}
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	df 90       	pop	r13
    150e:	cf 90       	pop	r12
    1510:	bf 90       	pop	r11
    1512:	af 90       	pop	r10
    1514:	9f 90       	pop	r9
    1516:	8f 90       	pop	r8
    1518:	7f 90       	pop	r7
    151a:	6f 90       	pop	r6
    151c:	08 95       	ret

0000151e <playerMove2>:
void playerMove2(int board[9], uint16_t positionX, uint16_t positionY)
{
    151e:	6f 92       	push	r6
    1520:	7f 92       	push	r7
    1522:	8f 92       	push	r8
    1524:	9f 92       	push	r9
    1526:	af 92       	push	r10
    1528:	bf 92       	push	r11
    152a:	cf 92       	push	r12
    152c:	df 92       	push	r13
    152e:	ef 92       	push	r14
    1530:	ff 92       	push	r15
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	5c 01       	movw	r10, r24
    153c:	eb 01       	movw	r28, r22
    153e:	7a 01       	movw	r14, r20
	ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
    1540:	ba 01       	movw	r22, r20
    1542:	67 50       	subi	r22, 0x07	; 7
    1544:	71 09       	sbc	r23, r1
    1546:	0f e1       	ldi	r16, 0x1F	; 31
    1548:	10 e0       	ldi	r17, 0x00	; 0
    154a:	2a e0       	ldi	r18, 0x0A	; 10
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	41 e1       	ldi	r20, 0x11	; 17
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	ce 01       	movw	r24, r28
    1554:	41 97       	sbiw	r24, 0x11	; 17
    1556:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
    155a:	01 c0       	rjmp	.+2      	; 0x155e <playerMove2+0x40>
    155c:	6c 01       	movw	r12, r24
	int move;
	do
	{
		restart:
		if(ReadADC(X_AXIS) > 700 && (positionY < 160))
    155e:	85 e0       	ldi	r24, 0x05	; 5
    1560:	0e 94 2b 07 	call	0xe56	; 0xe56 <ReadADC>
    1564:	8d 3b       	cpi	r24, 0xBD	; 189
    1566:	92 40       	sbci	r25, 0x02	; 2
    1568:	28 f1       	brcs	.+74     	; 0x15b4 <playerMove2+0x96>
    156a:	80 ea       	ldi	r24, 0xA0	; 160
    156c:	e8 16       	cp	r14, r24
    156e:	f1 04       	cpc	r15, r1
    1570:	08 f5       	brcc	.+66     	; 0x15b4 <playerMove2+0x96>
		{
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
    1572:	b7 01       	movw	r22, r14
    1574:	67 50       	subi	r22, 0x07	; 7
    1576:	71 09       	sbc	r23, r1
    1578:	00 e0       	ldi	r16, 0x00	; 0
    157a:	10 e0       	ldi	r17, 0x00	; 0
    157c:	2a e0       	ldi	r18, 0x0A	; 10
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	41 e1       	ldi	r20, 0x11	; 17
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	4e 01       	movw	r8, r28
    1586:	91 e1       	ldi	r25, 0x11	; 17
    1588:	89 1a       	sub	r8, r25
    158a:	91 08       	sbc	r9, r1
    158c:	c4 01       	movw	r24, r8
    158e:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
			positionY += 80;
    1592:	37 01       	movw	r6, r14
    1594:	20 e5       	ldi	r18, 0x50	; 80
    1596:	62 0e       	add	r6, r18
    1598:	71 1c       	adc	r7, r1
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
    159a:	b7 01       	movw	r22, r14
    159c:	67 5b       	subi	r22, 0xB7	; 183
    159e:	7f 4f       	sbci	r23, 0xFF	; 255
    15a0:	0f e1       	ldi	r16, 0x1F	; 31
    15a2:	10 e0       	ldi	r17, 0x00	; 0
    15a4:	2a e0       	ldi	r18, 0x0A	; 10
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	41 e1       	ldi	r20, 0x11	; 17
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	c4 01       	movw	r24, r8
    15ae:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
	{
		restart:
		if(ReadADC(X_AXIS) > 700 && (positionY < 160))
		{
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
			positionY += 80;
    15b2:	73 01       	movw	r14, r6
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	90 e7       	ldi	r25, 0x70	; 112
    15b8:	22 e0       	ldi	r18, 0x02	; 2
    15ba:	81 50       	subi	r24, 0x01	; 1
    15bc:	90 40       	sbci	r25, 0x00	; 0
    15be:	20 40       	sbci	r18, 0x00	; 0
    15c0:	e1 f7       	brne	.-8      	; 0x15ba <playerMove2+0x9c>
    15c2:	00 c0       	rjmp	.+0      	; 0x15c4 <playerMove2+0xa6>
    15c4:	00 00       	nop
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
		}
		_delay_ms(100);
		
		if(ReadADC(Y_AXIS) < 300 && (positionX < 160))
    15c6:	84 e0       	ldi	r24, 0x04	; 4
    15c8:	0e 94 2b 07 	call	0xe56	; 0xe56 <ReadADC>
    15cc:	8c 32       	cpi	r24, 0x2C	; 44
    15ce:	91 40       	sbci	r25, 0x01	; 1
    15d0:	10 f5       	brcc	.+68     	; 0x1616 <playerMove2+0xf8>
    15d2:	c0 3a       	cpi	r28, 0xA0	; 160
    15d4:	d1 05       	cpc	r29, r1
    15d6:	f8 f4       	brcc	.+62     	; 0x1616 <playerMove2+0xf8>
		{
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
    15d8:	00 e0       	ldi	r16, 0x00	; 0
    15da:	10 e0       	ldi	r17, 0x00	; 0
    15dc:	2a e0       	ldi	r18, 0x0A	; 10
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	41 e1       	ldi	r20, 0x11	; 17
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	37 01       	movw	r6, r14
    15e6:	87 e0       	ldi	r24, 0x07	; 7
    15e8:	68 1a       	sub	r6, r24
    15ea:	71 08       	sbc	r7, r1
    15ec:	b3 01       	movw	r22, r6
    15ee:	ce 01       	movw	r24, r28
    15f0:	41 97       	sbiw	r24, 0x11	; 17
    15f2:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
			positionX += 80;
    15f6:	4e 01       	movw	r8, r28
    15f8:	90 e5       	ldi	r25, 0x50	; 80
    15fa:	89 0e       	add	r8, r25
    15fc:	91 1c       	adc	r9, r1
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
    15fe:	0f e1       	ldi	r16, 0x1F	; 31
    1600:	10 e0       	ldi	r17, 0x00	; 0
    1602:	2a e0       	ldi	r18, 0x0A	; 10
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	41 e1       	ldi	r20, 0x11	; 17
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	b3 01       	movw	r22, r6
    160c:	ce 01       	movw	r24, r28
    160e:	cf 96       	adiw	r24, 0x3f	; 63
    1610:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
		_delay_ms(100);
		
		if(ReadADC(Y_AXIS) < 300 && (positionX < 160))
		{
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
			positionX += 80;
    1614:	e4 01       	movw	r28, r8
    1616:	2f ef       	ldi	r18, 0xFF	; 255
    1618:	80 e7       	ldi	r24, 0x70	; 112
    161a:	92 e0       	ldi	r25, 0x02	; 2
    161c:	21 50       	subi	r18, 0x01	; 1
    161e:	80 40       	sbci	r24, 0x00	; 0
    1620:	90 40       	sbci	r25, 0x00	; 0
    1622:	e1 f7       	brne	.-8      	; 0x161c <playerMove2+0xfe>
    1624:	00 c0       	rjmp	.+0      	; 0x1626 <playerMove2+0x108>
    1626:	00 00       	nop
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
		}
		_delay_ms(100);
		
		if(ReadADC(X_AXIS) < 300 && (positionY > 80))
    1628:	85 e0       	ldi	r24, 0x05	; 5
    162a:	0e 94 2b 07 	call	0xe56	; 0xe56 <ReadADC>
    162e:	8c 32       	cpi	r24, 0x2C	; 44
    1630:	91 40       	sbci	r25, 0x01	; 1
    1632:	28 f5       	brcc	.+74     	; 0x167e <playerMove2+0x160>
    1634:	81 e5       	ldi	r24, 0x51	; 81
    1636:	e8 16       	cp	r14, r24
    1638:	f1 04       	cpc	r15, r1
    163a:	08 f1       	brcs	.+66     	; 0x167e <playerMove2+0x160>
		{
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
    163c:	b7 01       	movw	r22, r14
    163e:	67 50       	subi	r22, 0x07	; 7
    1640:	71 09       	sbc	r23, r1
    1642:	00 e0       	ldi	r16, 0x00	; 0
    1644:	10 e0       	ldi	r17, 0x00	; 0
    1646:	2a e0       	ldi	r18, 0x0A	; 10
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	41 e1       	ldi	r20, 0x11	; 17
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	4e 01       	movw	r8, r28
    1650:	91 e1       	ldi	r25, 0x11	; 17
    1652:	89 1a       	sub	r8, r25
    1654:	91 08       	sbc	r9, r1
    1656:	c4 01       	movw	r24, r8
    1658:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
			positionY -= 80;
    165c:	37 01       	movw	r6, r14
    165e:	20 e5       	ldi	r18, 0x50	; 80
    1660:	62 1a       	sub	r6, r18
    1662:	71 08       	sbc	r7, r1
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
    1664:	b7 01       	movw	r22, r14
    1666:	67 55       	subi	r22, 0x57	; 87
    1668:	71 09       	sbc	r23, r1
    166a:	0f e1       	ldi	r16, 0x1F	; 31
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	2a e0       	ldi	r18, 0x0A	; 10
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	41 e1       	ldi	r20, 0x11	; 17
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	c4 01       	movw	r24, r8
    1678:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
		_delay_ms(100);
		
		if(ReadADC(X_AXIS) < 300 && (positionY > 80))
		{
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
			positionY -= 80;
    167c:	73 01       	movw	r14, r6
    167e:	8f ef       	ldi	r24, 0xFF	; 255
    1680:	90 e7       	ldi	r25, 0x70	; 112
    1682:	22 e0       	ldi	r18, 0x02	; 2
    1684:	81 50       	subi	r24, 0x01	; 1
    1686:	90 40       	sbci	r25, 0x00	; 0
    1688:	20 40       	sbci	r18, 0x00	; 0
    168a:	e1 f7       	brne	.-8      	; 0x1684 <playerMove2+0x166>
    168c:	00 c0       	rjmp	.+0      	; 0x168e <playerMove2+0x170>
    168e:	00 00       	nop
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
		}
		_delay_ms(100);
		
		if(ReadADC(Y_AXIS) > 700 && (positionX > 80))
    1690:	84 e0       	ldi	r24, 0x04	; 4
    1692:	0e 94 2b 07 	call	0xe56	; 0xe56 <ReadADC>
    1696:	8d 3b       	cpi	r24, 0xBD	; 189
    1698:	92 40       	sbci	r25, 0x02	; 2
    169a:	08 f4       	brcc	.+2      	; 0x169e <playerMove2+0x180>
    169c:	60 c0       	rjmp	.+192    	; 0x175e <playerMove2+0x240>
    169e:	c1 35       	cpi	r28, 0x51	; 81
    16a0:	d1 05       	cpc	r29, r1
    16a2:	08 f4       	brcc	.+2      	; 0x16a6 <playerMove2+0x188>
    16a4:	5c c0       	rjmp	.+184    	; 0x175e <playerMove2+0x240>
		{
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
    16a6:	00 e0       	ldi	r16, 0x00	; 0
    16a8:	10 e0       	ldi	r17, 0x00	; 0
    16aa:	2a e0       	ldi	r18, 0x0A	; 10
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	41 e1       	ldi	r20, 0x11	; 17
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	37 01       	movw	r6, r14
    16b4:	87 e0       	ldi	r24, 0x07	; 7
    16b6:	68 1a       	sub	r6, r24
    16b8:	71 08       	sbc	r7, r1
    16ba:	b3 01       	movw	r22, r6
    16bc:	ce 01       	movw	r24, r28
    16be:	41 97       	sbiw	r24, 0x11	; 17
    16c0:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
			positionX -= 80;
    16c4:	4e 01       	movw	r8, r28
    16c6:	90 e5       	ldi	r25, 0x50	; 80
    16c8:	89 1a       	sub	r8, r25
    16ca:	91 08       	sbc	r9, r1
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
    16cc:	0f e1       	ldi	r16, 0x1F	; 31
    16ce:	10 e0       	ldi	r17, 0x00	; 0
    16d0:	2a e0       	ldi	r18, 0x0A	; 10
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	41 e1       	ldi	r20, 0x11	; 17
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	b3 01       	movw	r22, r6
    16da:	ce 01       	movw	r24, r28
    16dc:	81 56       	subi	r24, 0x61	; 97
    16de:	91 09       	sbc	r25, r1
    16e0:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
		_delay_ms(100);
		
		if(ReadADC(Y_AXIS) > 700 && (positionX > 80))
		{
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
			positionX -= 80;
    16e4:	e4 01       	movw	r28, r8
    16e6:	3b c0       	rjmp	.+118    	; 0x175e <playerMove2+0x240>

	} while((PIND & (1 << PIND6)));

	for (int i = 0; i < 9; i++)
	{
		if(positionX == Array_of_cells[i][0])
    16e8:	fc 01       	movw	r30, r24
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	ee 0f       	add	r30, r30
    16f0:	ff 1f       	adc	r31, r31
    16f2:	ee 5e       	subi	r30, 0xEE	; 238
    16f4:	fe 4f       	sbci	r31, 0xFE	; 254
    16f6:	20 81       	ld	r18, Z
    16f8:	31 81       	ldd	r19, Z+1	; 0x01
    16fa:	2c 17       	cp	r18, r28
    16fc:	3d 07       	cpc	r19, r29
    16fe:	99 f4       	brne	.+38     	; 0x1726 <playerMove2+0x208>
		{
			if(positionY == Array_of_cells[i][1])
    1700:	fc 01       	movw	r30, r24
    1702:	ee 0f       	add	r30, r30
    1704:	ff 1f       	adc	r31, r31
    1706:	ee 0f       	add	r30, r30
    1708:	ff 1f       	adc	r31, r31
    170a:	ee 5e       	subi	r30, 0xEE	; 238
    170c:	fe 4f       	sbci	r31, 0xFE	; 254
    170e:	22 81       	ldd	r18, Z+2	; 0x02
    1710:	33 81       	ldd	r19, Z+3	; 0x03
    1712:	e2 16       	cp	r14, r18
    1714:	f3 06       	cpc	r15, r19
    1716:	39 f4       	brne	.+14     	; 0x1726 <playerMove2+0x208>
			{
				move = i;
				if(board[move]!= 0)
    1718:	2d 91       	ld	r18, X+
    171a:	3c 91       	ld	r19, X
    171c:	11 97       	sbiw	r26, 0x01	; 1
    171e:	23 2b       	or	r18, r19
    1720:	09 f0       	breq	.+2      	; 0x1724 <playerMove2+0x206>
    1722:	1c cf       	rjmp	.-456    	; 0x155c <playerMove2+0x3e>
    1724:	6c 01       	movw	r12, r24
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
		}

	} while((PIND & (1 << PIND6)));

	for (int i = 0; i < 9; i++)
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	12 96       	adiw	r26, 0x02	; 2
    172a:	89 30       	cpi	r24, 0x09	; 9
    172c:	91 05       	cpc	r25, r1
    172e:	e1 f6       	brne	.-72     	; 0x16e8 <playerMove2+0x1ca>
			}
			
		}
	}

	ili9341_fillrect(positionX-17,positionY-7,20,10,BLACK);
    1730:	b7 01       	movw	r22, r14
    1732:	67 50       	subi	r22, 0x07	; 7
    1734:	71 09       	sbc	r23, r1
    1736:	00 e0       	ldi	r16, 0x00	; 0
    1738:	10 e0       	ldi	r17, 0x00	; 0
    173a:	2a e0       	ldi	r18, 0x0A	; 10
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	44 e1       	ldi	r20, 0x14	; 20
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	ce 01       	movw	r24, r28
    1744:	41 97       	sbiw	r24, 0x11	; 17
    1746:	0e 94 37 05 	call	0xa6e	; 0xa6e <ili9341_fillrect>
	board[move] = 1;
    174a:	cc 0c       	add	r12, r12
    174c:	dd 1c       	adc	r13, r13
    174e:	f5 01       	movw	r30, r10
    1750:	ec 0d       	add	r30, r12
    1752:	fd 1d       	adc	r31, r13
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
	
}
    175c:	06 c0       	rjmp	.+12     	; 0x176a <playerMove2+0x24c>
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLACK);
			positionX -= 80;
			ili9341_fillrect(positionX-17,positionY-7,17,10,BLUE);
		}

	} while((PIND & (1 << PIND6)));
    175e:	4e 99       	sbic	0x09, 6	; 9
    1760:	fe ce       	rjmp	.-516    	; 0x155e <playerMove2+0x40>
    1762:	d5 01       	movw	r26, r10
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	bf cf       	rjmp	.-130    	; 0x16e8 <playerMove2+0x1ca>
	}

	ili9341_fillrect(positionX-17,positionY-7,20,10,BLACK);
	board[move] = 1;
	
}
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	df 90       	pop	r13
    1778:	cf 90       	pop	r12
    177a:	bf 90       	pop	r11
    177c:	af 90       	pop	r10
    177e:	9f 90       	pop	r9
    1780:	8f 90       	pop	r8
    1782:	7f 90       	pop	r7
    1784:	6f 90       	pop	r6
    1786:	08 95       	ret

00001788 <main>:
void computerMove(int board[9]);
void playerMove1(int board[9], uint16_t positionX, uint16_t positionY);
void playerMove2(int board[9], uint16_t positionX, uint16_t positionY);

int main(void)
{
    1788:	4f 92       	push	r4
    178a:	5f 92       	push	r5
    178c:	6f 92       	push	r6
    178e:	7f 92       	push	r7
    1790:	8f 92       	push	r8
    1792:	9f 92       	push	r9
    1794:	af 92       	push	r10
    1796:	bf 92       	push	r11
    1798:	cf 92       	push	r12
    179a:	df 92       	push	r13
    179c:	ef 92       	push	r14
    179e:	ff 92       	push	r15
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	62 97       	sbiw	r28, 0x12	; 18
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
	
	stdout = & mydata;
    17b8:	84 e0       	ldi	r24, 0x04	; 4
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <__iob+0x3>
    17c0:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <__iob+0x2>
	ili9341_init();//initial driver setup to drive ili9341
    17c4:	0e 94 43 03 	call	0x686	; 0x686 <ili9341_init>
	ili9341_clear(GREEN);//fill screen with black colour
    17c8:	80 ee       	ldi	r24, 0xE0	; 224
    17ca:	97 e0       	ldi	r25, 0x07	; 7
    17cc:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <ili9341_clear>
    17d0:	2f ef       	ldi	r18, 0xFF	; 255
    17d2:	80 e7       	ldi	r24, 0x70	; 112
    17d4:	92 e0       	ldi	r25, 0x02	; 2
    17d6:	21 50       	subi	r18, 0x01	; 1
    17d8:	80 40       	sbci	r24, 0x00	; 0
    17da:	90 40       	sbci	r25, 0x00	; 0
    17dc:	e1 f7       	brne	.-8      	; 0x17d6 <main+0x4e>
    17de:	00 c0       	rjmp	.+0      	; 0x17e0 <main+0x58>
    17e0:	00 00       	nop
	_delay_ms(100);
	ili9341_setRotation(3);//rotate screen
    17e2:	83 e0       	ldi	r24, 0x03	; 3
    17e4:	0e 94 9c 05 	call	0xb38	; 0xb38 <ili9341_setRotation>
	

	DDRD &= ~(1<<DDD6);
    17e8:	56 98       	cbi	0x0a, 6	; 10
	PORTD |= (1<<PORTD6);
    17ea:	5e 9a       	sbi	0x0b, 6	; 11
	
	ADMUX |= (1<<REFS0);
    17ec:	ec e7       	ldi	r30, 0x7C	; 124
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	80 64       	ori	r24, 0x40	; 64
    17f4:	80 83       	st	Z, r24
	//Enabling the analog to digital converter
	ADCSRA |= (1<<ADEN);
    17f6:	ea e7       	ldi	r30, 0x7A	; 122
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	80 68       	ori	r24, 0x80	; 128
    17fe:	80 83       	st	Z, r24
	//Prescaling the clock for the conversion by 32
	
	int board[9] = {0,0,0,0,0,0,0,0,0};
    1800:	fe 01       	movw	r30, r28
    1802:	31 96       	adiw	r30, 0x01	; 1
    1804:	82 e1       	ldi	r24, 0x12	; 18
    1806:	df 01       	movw	r26, r30
    1808:	1d 92       	st	X+, r1
    180a:	8a 95       	dec	r24
    180c:	e9 f7       	brne	.-6      	; 0x1808 <main+0x80>
	ili9341_setcursor(40,60);
    180e:	6c e3       	ldi	r22, 0x3C	; 60
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	88 e2       	ldi	r24, 0x28	; 40
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
	ili9341_settextcolour(RED,GREEN);
    181a:	60 ee       	ldi	r22, 0xE0	; 224
    181c:	77 e0       	ldi	r23, 0x07	; 7
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	98 ef       	ldi	r25, 0xF8	; 248
    1822:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
	ili9341_settextsize(4);
    1826:	84 e0       	ldi	r24, 0x04	; 4
    1828:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
	printf("XO Station");
    182c:	86 e6       	ldi	r24, 0x66	; 102
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	9f 93       	push	r25
    1832:	8f 93       	push	r24
    1834:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
	
	ili9341_setcursor(40,110);
    1838:	6e e6       	ldi	r22, 0x6E	; 110
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	88 e2       	ldi	r24, 0x28	; 40
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
	ili9341_settextcolour(BLUE,GREEN);
    1844:	60 ee       	ldi	r22, 0xE0	; 224
    1846:	77 e0       	ldi	r23, 0x07	; 7
    1848:	8f e1       	ldi	r24, 0x1F	; 31
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
	ili9341_settextsize(2);
    1850:	82 e0       	ldi	r24, 0x02	; 2
    1852:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
	printf("-Single Player");
    1856:	81 e7       	ldi	r24, 0x71	; 113
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	9f 93       	push	r25
    185c:	8f 93       	push	r24
    185e:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
	
	ili9341_setcursor(40,130);
    1862:	62 e8       	ldi	r22, 0x82	; 130
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	88 e2       	ldi	r24, 0x28	; 40
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
	ili9341_settextcolour(BLUE,GREEN);
    186e:	60 ee       	ldi	r22, 0xE0	; 224
    1870:	77 e0       	ldi	r23, 0x07	; 7
    1872:	8f e1       	ldi	r24, 0x1F	; 31
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
	ili9341_settextsize(2);
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
	printf("Multiplayer");
    1880:	81 e8       	ldi	r24, 0x81	; 129
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	9f 93       	push	r25
    1886:	8f 93       	push	r24
    1888:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
	int gameplay_state;

	
	while(1)
	{
		gameplay_state = 1;
    1898:	01 e0       	ldi	r16, 0x01	; 1
    189a:	10 e0       	ldi	r17, 0x00	; 0
			{
				gameplay_state = 2;
				ili9341_setcursor(40,110);
				ili9341_settextcolour(BLUE,GREEN);
				ili9341_settextsize(2);
				printf("Single Player");
    189c:	0f 2e       	mov	r0, r31
    189e:	f2 e7       	ldi	r31, 0x72	; 114
    18a0:	8f 2e       	mov	r8, r31
    18a2:	f1 e0       	ldi	r31, 0x01	; 1
    18a4:	9f 2e       	mov	r9, r31
    18a6:	f0 2d       	mov	r31, r0
			
				ili9341_setcursor(40,130);
				ili9341_settextcolour(BLUE,GREEN);
				ili9341_settextsize(2);
				printf("-Multiplayer");
    18a8:	0f 2e       	mov	r0, r31
    18aa:	f0 e8       	ldi	r31, 0x80	; 128
    18ac:	af 2e       	mov	r10, r31
    18ae:	f1 e0       	ldi	r31, 0x01	; 1
    18b0:	bf 2e       	mov	r11, r31
    18b2:	f0 2d       	mov	r31, r0
				ili9341_settextsize(2);
				printf("Multiplayer");
			}
			else if(ReadADC(X_AXIS)>600)
			{
				gameplay_state = 2;
    18b4:	68 94       	set
    18b6:	44 24       	eor	r4, r4
    18b8:	41 f8       	bld	r4, 1
    18ba:	51 2c       	mov	r5, r1
			{
				gameplay_state = 1;
				ili9341_setcursor(40,110);
				ili9341_settextcolour(BLUE,GREEN);
				ili9341_settextsize(2);
				printf("-Single Player");
    18bc:	0f 2e       	mov	r0, r31
    18be:	f1 e7       	ldi	r31, 0x71	; 113
    18c0:	cf 2e       	mov	r12, r31
    18c2:	f1 e0       	ldi	r31, 0x01	; 1
    18c4:	df 2e       	mov	r13, r31
    18c6:	f0 2d       	mov	r31, r0
			
				ili9341_setcursor(40,130);
				ili9341_settextcolour(BLUE,GREEN);
				ili9341_settextsize(2);
				printf("Multiplayer");
    18c8:	0f 2e       	mov	r0, r31
    18ca:	f1 e8       	ldi	r31, 0x81	; 129
    18cc:	ef 2e       	mov	r14, r31
    18ce:	f1 e0       	ldi	r31, 0x01	; 1
    18d0:	ff 2e       	mov	r15, r31
    18d2:	f0 2d       	mov	r31, r0
		gameplay_state = 1;
		do
		{
			if(ReadADC(X_AXIS)<=400)
			{
				gameplay_state = 1;
    18d4:	66 24       	eor	r6, r6
    18d6:	63 94       	inc	r6
    18d8:	71 2c       	mov	r7, r1
	while(1)
	{
		gameplay_state = 1;
		do
		{
			if(ReadADC(X_AXIS)<=400)
    18da:	85 e0       	ldi	r24, 0x05	; 5
    18dc:	0e 94 2b 07 	call	0xe56	; 0xe56 <ReadADC>
    18e0:	81 39       	cpi	r24, 0x91	; 145
    18e2:	91 40       	sbci	r25, 0x01	; 1
    18e4:	68 f5       	brcc	.+90     	; 0x1940 <main+0x1b8>
			{
				gameplay_state = 1;
				ili9341_setcursor(40,110);
    18e6:	6e e6       	ldi	r22, 0x6E	; 110
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	88 e2       	ldi	r24, 0x28	; 40
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
				ili9341_settextcolour(BLUE,GREEN);
    18f2:	60 ee       	ldi	r22, 0xE0	; 224
    18f4:	77 e0       	ldi	r23, 0x07	; 7
    18f6:	8f e1       	ldi	r24, 0x1F	; 31
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
				ili9341_settextsize(2);
    18fe:	82 e0       	ldi	r24, 0x02	; 2
    1900:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
				printf("-Single Player");
    1904:	df 92       	push	r13
    1906:	cf 92       	push	r12
    1908:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
			
				ili9341_setcursor(40,130);
    190c:	62 e8       	ldi	r22, 0x82	; 130
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	88 e2       	ldi	r24, 0x28	; 40
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
				ili9341_settextcolour(BLUE,GREEN);
    1918:	60 ee       	ldi	r22, 0xE0	; 224
    191a:	77 e0       	ldi	r23, 0x07	; 7
    191c:	8f e1       	ldi	r24, 0x1F	; 31
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
				ili9341_settextsize(2);
    1924:	82 e0       	ldi	r24, 0x02	; 2
    1926:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
				printf("Multiplayer");
    192a:	ff 92       	push	r15
    192c:	ef 92       	push	r14
    192e:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
		gameplay_state = 1;
		do
		{
			if(ReadADC(X_AXIS)<=400)
			{
				gameplay_state = 1;
    193a:	06 2d       	mov	r16, r6
    193c:	17 2d       	mov	r17, r7
    193e:	32 c0       	rjmp	.+100    	; 0x19a4 <main+0x21c>
				ili9341_setcursor(40,130);
				ili9341_settextcolour(BLUE,GREEN);
				ili9341_settextsize(2);
				printf("Multiplayer");
			}
			else if(ReadADC(X_AXIS)>600)
    1940:	85 e0       	ldi	r24, 0x05	; 5
    1942:	0e 94 2b 07 	call	0xe56	; 0xe56 <ReadADC>
    1946:	89 35       	cpi	r24, 0x59	; 89
    1948:	92 40       	sbci	r25, 0x02	; 2
    194a:	60 f1       	brcs	.+88     	; 0x19a4 <main+0x21c>
			{
				gameplay_state = 2;
				ili9341_setcursor(40,110);
    194c:	6e e6       	ldi	r22, 0x6E	; 110
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	88 e2       	ldi	r24, 0x28	; 40
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
				ili9341_settextcolour(BLUE,GREEN);
    1958:	60 ee       	ldi	r22, 0xE0	; 224
    195a:	77 e0       	ldi	r23, 0x07	; 7
    195c:	8f e1       	ldi	r24, 0x1F	; 31
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
				ili9341_settextsize(2);
    1964:	82 e0       	ldi	r24, 0x02	; 2
    1966:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
				printf("Single Player");
    196a:	9f 92       	push	r9
    196c:	8f 92       	push	r8
    196e:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
			
				ili9341_setcursor(40,130);
    1972:	62 e8       	ldi	r22, 0x82	; 130
    1974:	70 e0       	ldi	r23, 0x00	; 0
    1976:	88 e2       	ldi	r24, 0x28	; 40
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
				ili9341_settextcolour(BLUE,GREEN);
    197e:	60 ee       	ldi	r22, 0xE0	; 224
    1980:	77 e0       	ldi	r23, 0x07	; 7
    1982:	8f e1       	ldi	r24, 0x1F	; 31
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
				ili9341_settextsize(2);
    198a:	82 e0       	ldi	r24, 0x02	; 2
    198c:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
				printf("-Multiplayer");
    1990:	bf 92       	push	r11
    1992:	af 92       	push	r10
    1994:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
				ili9341_settextsize(2);
				printf("Multiplayer");
			}
			else if(ReadADC(X_AXIS)>600)
			{
				gameplay_state = 2;
    19a0:	04 2d       	mov	r16, r4
    19a2:	15 2d       	mov	r17, r5
				ili9341_setcursor(40,130);
				ili9341_settextcolour(BLUE,GREEN);
				ili9341_settextsize(2);
				printf("-Multiplayer");
			}
		}while(PIND &(1<<PIND6));
    19a4:	4e 99       	sbic	0x09, 6	; 9
    19a6:	99 cf       	rjmp	.-206    	; 0x18da <main+0x152>
	
		if(gameplay_state == 1)
    19a8:	01 30       	cpi	r16, 0x01	; 1
    19aa:	11 05       	cpc	r17, r1
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <main+0x228>
    19ae:	77 c1       	rjmp	.+750    	; 0x1c9e <main+0x516>
		{
				ili9341_clear(BLACK);
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <ili9341_clear>
				DRAW_GRID ();
    19b8:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DRAW_GRID>
				uint16_t p1X = 20;
				uint16_t p1Y = 10;
				for(int turn = 0; turn < 9 && win(board) == 0; turn++)
    19bc:	00 e0       	ldi	r16, 0x00	; 0
    19be:	10 e0       	ldi	r17, 0x00	; 0
					else
					{
						ili9341_setcursor(250,10);
						ili9341_settextcolour(WHITE,BLACK);
						ili9341_settextsize(2);
						printf("Player");
    19c0:	0f 2e       	mov	r0, r31
    19c2:	f9 e7       	ldi	r31, 0x79	; 121
    19c4:	af 2e       	mov	r10, r31
    19c6:	f1 e0       	ldi	r31, 0x01	; 1
    19c8:	bf 2e       	mov	r11, r31
    19ca:	f0 2d       	mov	r31, r0
						ili9341_setcursor(250,30);
						printf("One ");
    19cc:	0f 2e       	mov	r0, r31
    19ce:	fe e9       	ldi	r31, 0x9E	; 158
    19d0:	cf 2e       	mov	r12, r31
    19d2:	f1 e0       	ldi	r31, 0x01	; 1
    19d4:	df 2e       	mov	r13, r31
    19d6:	f0 2d       	mov	r31, r0
						ili9341_setcursor(250,50);
						printf("Turn");
    19d8:	0f 2e       	mov	r0, r31
    19da:	f4 e9       	ldi	r31, 0x94	; 148
    19dc:	ef 2e       	mov	r14, r31
    19de:	f1 e0       	ldi	r31, 0x01	; 1
    19e0:	ff 2e       	mov	r15, r31
    19e2:	f0 2d       	mov	r31, r0
					if((turn) % 2 == 1)
					{
						ili9341_setcursor(250,10);
						ili9341_settextcolour(WHITE,BLACK);
						ili9341_settextsize(2);
						printf("CMP   ");
    19e4:	0f 2e       	mov	r0, r31
    19e6:	fd e8       	ldi	r31, 0x8D	; 141
    19e8:	8f 2e       	mov	r8, r31
    19ea:	f1 e0       	ldi	r31, 0x01	; 1
    19ec:	9f 2e       	mov	r9, r31
    19ee:	f0 2d       	mov	r31, r0
						ili9341_setcursor(250,30);
						printf("Turn");
						ili9341_setcursor(250,50);
						printf("    ");
    19f0:	0f 2e       	mov	r0, r31
    19f2:	f9 e9       	ldi	r31, 0x99	; 153
    19f4:	6f 2e       	mov	r6, r31
    19f6:	f1 e0       	ldi	r31, 0x01	; 1
    19f8:	7f 2e       	mov	r7, r31
    19fa:	f0 2d       	mov	r31, r0
    19fc:	92 c0       	rjmp	.+292    	; 0x1b22 <main+0x39a>
				DRAW_GRID ();
				uint16_t p1X = 20;
				uint16_t p1Y = 10;
				for(int turn = 0; turn < 9 && win(board) == 0; turn++)
				{
					if((turn) % 2 == 1)
    19fe:	c8 01       	movw	r24, r16
    1a00:	81 70       	andi	r24, 0x01	; 1
    1a02:	90 78       	andi	r25, 0x80	; 128
    1a04:	99 23       	and	r25, r25
    1a06:	24 f4       	brge	.+8      	; 0x1a10 <main+0x288>
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	8e 6f       	ori	r24, 0xFE	; 254
    1a0c:	9f 6f       	ori	r25, 0xFF	; 255
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	09 f0       	breq	.+2      	; 0x1a16 <main+0x28e>
    1a14:	3f c0       	rjmp	.+126    	; 0x1a94 <main+0x30c>
					{
						ili9341_setcursor(250,10);
    1a16:	6a e0       	ldi	r22, 0x0A	; 10
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	8a ef       	ldi	r24, 0xFA	; 250
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
						ili9341_settextcolour(WHITE,BLACK);
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	9f ef       	ldi	r25, 0xFF	; 255
    1a2a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
						ili9341_settextsize(2);
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
						printf("CMP   ");
    1a34:	9f 92       	push	r9
    1a36:	8f 92       	push	r8
    1a38:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
						ili9341_setcursor(250,30);
    1a3c:	6e e1       	ldi	r22, 0x1E	; 30
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	8a ef       	ldi	r24, 0xFA	; 250
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
						printf("Turn");
    1a48:	ff 92       	push	r15
    1a4a:	ef 92       	push	r14
    1a4c:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
						ili9341_setcursor(250,50);
    1a50:	62 e3       	ldi	r22, 0x32	; 50
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	8a ef       	ldi	r24, 0xFA	; 250
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
						printf("    ");
    1a5c:	7f 92       	push	r7
    1a5e:	6f 92       	push	r6
    1a60:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
						computerMove(board);
    1a64:	ce 01       	movw	r24, r28
    1a66:	01 96       	adiw	r24, 0x01	; 1
    1a68:	0e 94 0c 09 	call	0x1218	; 0x1218 <computerMove>
    1a6c:	8f ef       	ldi	r24, 0xFF	; 255
    1a6e:	99 e6       	ldi	r25, 0x69	; 105
    1a70:	a8 e1       	ldi	r26, 0x18	; 24
    1a72:	81 50       	subi	r24, 0x01	; 1
    1a74:	90 40       	sbci	r25, 0x00	; 0
    1a76:	a0 40       	sbci	r26, 0x00	; 0
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <main+0x2ea>
    1a7a:	00 c0       	rjmp	.+0      	; 0x1a7c <main+0x2f4>
    1a7c:	00 00       	nop
						_delay_ms(1000);
						DRAW_TURN(board);
    1a7e:	ce 01       	movw	r24, r28
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	0e 94 26 08 	call	0x104c	; 0x104c <DRAW_TURN>
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	42 c0       	rjmp	.+132    	; 0x1b18 <main+0x390>
					}
					else
					{
						ili9341_setcursor(250,10);
    1a94:	6a e0       	ldi	r22, 0x0A	; 10
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	8a ef       	ldi	r24, 0xFA	; 250
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
						ili9341_settextcolour(WHITE,BLACK);
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	8f ef       	ldi	r24, 0xFF	; 255
    1aa6:	9f ef       	ldi	r25, 0xFF	; 255
    1aa8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
						ili9341_settextsize(2);
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
						printf("Player");
    1ab2:	bf 92       	push	r11
    1ab4:	af 92       	push	r10
    1ab6:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
						ili9341_setcursor(250,30);
    1aba:	6e e1       	ldi	r22, 0x1E	; 30
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	8a ef       	ldi	r24, 0xFA	; 250
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
						printf("One ");
    1ac6:	df 92       	push	r13
    1ac8:	cf 92       	push	r12
    1aca:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
						ili9341_setcursor(250,50);
    1ace:	62 e3       	ldi	r22, 0x32	; 50
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	8a ef       	ldi	r24, 0xFA	; 250
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
						printf("Turn");
    1ada:	ff 92       	push	r15
    1adc:	ef 92       	push	r14
    1ade:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
						playerMove1(board,p1X,p1Y);
    1ae2:	4a e0       	ldi	r20, 0x0A	; 10
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	64 e1       	ldi	r22, 0x14	; 20
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	ce 01       	movw	r24, r28
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <playerMove1>
    1af2:	bf ef       	ldi	r27, 0xFF	; 255
    1af4:	29 e6       	ldi	r18, 0x69	; 105
    1af6:	88 e1       	ldi	r24, 0x18	; 24
    1af8:	b1 50       	subi	r27, 0x01	; 1
    1afa:	20 40       	sbci	r18, 0x00	; 0
    1afc:	80 40       	sbci	r24, 0x00	; 0
    1afe:	e1 f7       	brne	.-8      	; 0x1af8 <main+0x370>
    1b00:	00 c0       	rjmp	.+0      	; 0x1b02 <main+0x37a>
    1b02:	00 00       	nop
						_delay_ms(1000);
						DRAW_TURN(board);	
    1b04:	ce 01       	movw	r24, r28
    1b06:	01 96       	adiw	r24, 0x01	; 1
    1b08:	0e 94 26 08 	call	0x104c	; 0x104c <DRAW_TURN>
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
		{
				ili9341_clear(BLACK);
				DRAW_GRID ();
				uint16_t p1X = 20;
				uint16_t p1Y = 10;
				for(int turn = 0; turn < 9 && win(board) == 0; turn++)
    1b18:	0f 5f       	subi	r16, 0xFF	; 255
    1b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1c:	09 30       	cpi	r16, 0x09	; 9
    1b1e:	11 05       	cpc	r17, r1
    1b20:	39 f0       	breq	.+14     	; 0x1b30 <main+0x3a8>
    1b22:	ce 01       	movw	r24, r28
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <win>
    1b2a:	89 2b       	or	r24, r25
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <main+0x3a8>
    1b2e:	67 cf       	rjmp	.-306    	; 0x19fe <main+0x276>
						_delay_ms(1000);
						DRAW_TURN(board);	
					}
				}
				
				switch(win(board))
    1b30:	ce 01       	movw	r24, r28
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <win>
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	41 f0       	breq	.+16     	; 0x1b4c <main+0x3c4>
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	91 05       	cpc	r25, r1
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <main+0x3bc>
    1b42:	41 c0       	rjmp	.+130    	; 0x1bc6 <main+0x43e>
    1b44:	01 96       	adiw	r24, 0x01	; 1
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <main+0x3c2>
    1b48:	30 c2       	rjmp	.+1120   	; 0x1faa <main+0x822>
    1b4a:	6c c0       	rjmp	.+216    	; 0x1c24 <main+0x49c>
				{
					case 0:
					ili9341_setcursor(250,10);
    1b4c:	6a e0       	ldi	r22, 0x0A	; 10
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	8a ef       	ldi	r24, 0xFA	; 250
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					ili9341_settextcolour(WHITE,BLACK);
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	8f ef       	ldi	r24, 0xFF	; 255
    1b5e:	9f ef       	ldi	r25, 0xFF	; 255
    1b60:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
					ili9341_settextsize(2);
    1b64:	82 e0       	ldi	r24, 0x02	; 2
    1b66:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
					printf("Draw  ");
    1b6a:	83 ea       	ldi	r24, 0xA3	; 163
    1b6c:	91 e0       	ldi	r25, 0x01	; 1
    1b6e:	9f 93       	push	r25
    1b70:	8f 93       	push	r24
    1b72:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
					ili9341_setcursor(250,30);
    1b76:	6e e1       	ldi	r22, 0x1E	; 30
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	8a ef       	ldi	r24, 0xFA	; 250
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					printf("No one");
    1b82:	8a ea       	ldi	r24, 0xAA	; 170
    1b84:	91 e0       	ldi	r25, 0x01	; 1
    1b86:	9f 93       	push	r25
    1b88:	8f 93       	push	r24
    1b8a:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
					ili9341_setcursor(250,50);
    1b8e:	62 e3       	ldi	r22, 0x32	; 50
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	8a ef       	ldi	r24, 0xFA	; 250
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					printf("wins");
    1b9a:	81 eb       	ldi	r24, 0xB1	; 177
    1b9c:	91 e0       	ldi	r25, 0x01	; 1
    1b9e:	9f 93       	push	r25
    1ba0:	8f 93       	push	r24
    1ba2:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
    1ba6:	bf ef       	ldi	r27, 0xFF	; 255
    1ba8:	23 ed       	ldi	r18, 0xD3	; 211
    1baa:	80 e3       	ldi	r24, 0x30	; 48
    1bac:	b1 50       	subi	r27, 0x01	; 1
    1bae:	20 40       	sbci	r18, 0x00	; 0
    1bb0:	80 40       	sbci	r24, 0x00	; 0
    1bb2:	e1 f7       	brne	.-8      	; 0x1bac <main+0x424>
    1bb4:	00 c0       	rjmp	.+0      	; 0x1bb6 <main+0x42e>
    1bb6:	00 00       	nop
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	f2 c1       	rjmp	.+996    	; 0x1faa <main+0x822>
					_delay_ms(2000);
					break;
					case 1:
					ili9341_setcursor(250,10);
    1bc6:	6a e0       	ldi	r22, 0x0A	; 10
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	8a ef       	ldi	r24, 0xFA	; 250
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					ili9341_settextcolour(WHITE,BLACK);
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	9f ef       	ldi	r25, 0xFF	; 255
    1bda:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
					ili9341_settextsize(2);
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
					printf("CMP");
    1be4:	86 eb       	ldi	r24, 0xB6	; 182
    1be6:	91 e0       	ldi	r25, 0x01	; 1
    1be8:	9f 93       	push	r25
    1bea:	8f 93       	push	r24
    1bec:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
					ili9341_setcursor(250,30);
    1bf0:	6e e1       	ldi	r22, 0x1E	; 30
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	8a ef       	ldi	r24, 0xFA	; 250
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					printf("Wins");
    1bfc:	8a eb       	ldi	r24, 0xBA	; 186
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	9f 93       	push	r25
    1c02:	8f 93       	push	r24
    1c04:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
    1c08:	9f ef       	ldi	r25, 0xFF	; 255
    1c0a:	a3 ed       	ldi	r26, 0xD3	; 211
    1c0c:	b0 e3       	ldi	r27, 0x30	; 48
    1c0e:	91 50       	subi	r25, 0x01	; 1
    1c10:	a0 40       	sbci	r26, 0x00	; 0
    1c12:	b0 40       	sbci	r27, 0x00	; 0
    1c14:	e1 f7       	brne	.-8      	; 0x1c0e <main+0x486>
    1c16:	00 c0       	rjmp	.+0      	; 0x1c18 <main+0x490>
    1c18:	00 00       	nop
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	c3 c1       	rjmp	.+902    	; 0x1faa <main+0x822>
					_delay_ms(2000);
					break;
					case -1:
					ili9341_setcursor(250,10);
    1c24:	6a e0       	ldi	r22, 0x0A	; 10
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	8a ef       	ldi	r24, 0xFA	; 250
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					ili9341_settextcolour(WHITE,BLACK);
    1c30:	60 e0       	ldi	r22, 0x00	; 0
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	8f ef       	ldi	r24, 0xFF	; 255
    1c36:	9f ef       	ldi	r25, 0xFF	; 255
    1c38:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
					ili9341_settextsize(2);
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
					printf("Player");
    1c42:	89 e7       	ldi	r24, 0x79	; 121
    1c44:	91 e0       	ldi	r25, 0x01	; 1
    1c46:	9f 93       	push	r25
    1c48:	8f 93       	push	r24
    1c4a:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
					ili9341_setcursor(250,30);
    1c4e:	6e e1       	ldi	r22, 0x1E	; 30
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	8a ef       	ldi	r24, 0xFA	; 250
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					printf("One");
    1c5a:	8f eb       	ldi	r24, 0xBF	; 191
    1c5c:	91 e0       	ldi	r25, 0x01	; 1
    1c5e:	9f 93       	push	r25
    1c60:	8f 93       	push	r24
    1c62:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
					ili9341_setcursor(250,50);
    1c66:	62 e3       	ldi	r22, 0x32	; 50
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	8a ef       	ldi	r24, 0xFA	; 250
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					printf("Wins");
    1c72:	8a eb       	ldi	r24, 0xBA	; 186
    1c74:	91 e0       	ldi	r25, 0x01	; 1
    1c76:	9f 93       	push	r25
    1c78:	8f 93       	push	r24
    1c7a:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
    1c7e:	2f ef       	ldi	r18, 0xFF	; 255
    1c80:	83 ed       	ldi	r24, 0xD3	; 211
    1c82:	90 e3       	ldi	r25, 0x30	; 48
    1c84:	21 50       	subi	r18, 0x01	; 1
    1c86:	80 40       	sbci	r24, 0x00	; 0
    1c88:	90 40       	sbci	r25, 0x00	; 0
    1c8a:	e1 f7       	brne	.-8      	; 0x1c84 <main+0x4fc>
    1c8c:	00 c0       	rjmp	.+0      	; 0x1c8e <main+0x506>
    1c8e:	00 00       	nop
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	86 c1       	rjmp	.+780    	; 0x1faa <main+0x822>
					_delay_ms(2000);
					break;
				}
		}
		else if(gameplay_state == 2)
    1c9e:	02 30       	cpi	r16, 0x02	; 2
    1ca0:	11 05       	cpc	r17, r1
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <main+0x51e>
    1ca4:	82 c1       	rjmp	.+772    	; 0x1faa <main+0x822>
		{
				ili9341_clear(BLACK);
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <ili9341_clear>
				DRAW_GRID ();
    1cae:	0e 94 3f 07 	call	0xe7e	; 0xe7e <DRAW_GRID>
				uint16_t p1X = 20;
				uint16_t p1Y = 10;
				for(int turn = 0; turn < 9 && win(board) == 0; turn++)
    1cb2:	00 e0       	ldi	r16, 0x00	; 0
    1cb4:	10 e0       	ldi	r17, 0x00	; 0
					else
					{
						ili9341_setcursor(250,10);
						ili9341_settextcolour(WHITE,BLACK);
						ili9341_settextsize(2);
						printf("Player");
    1cb6:	0f 2e       	mov	r0, r31
    1cb8:	f9 e7       	ldi	r31, 0x79	; 121
    1cba:	cf 2e       	mov	r12, r31
    1cbc:	f1 e0       	ldi	r31, 0x01	; 1
    1cbe:	df 2e       	mov	r13, r31
    1cc0:	f0 2d       	mov	r31, r0
						ili9341_setcursor(250,30);
						printf("One");
    1cc2:	0f 2e       	mov	r0, r31
    1cc4:	ff eb       	ldi	r31, 0xBF	; 191
    1cc6:	af 2e       	mov	r10, r31
    1cc8:	f1 e0       	ldi	r31, 0x01	; 1
    1cca:	bf 2e       	mov	r11, r31
    1ccc:	f0 2d       	mov	r31, r0
						ili9341_setcursor(250,50);
						printf("Turn");
    1cce:	0f 2e       	mov	r0, r31
    1cd0:	f4 e9       	ldi	r31, 0x94	; 148
    1cd2:	ef 2e       	mov	r14, r31
    1cd4:	f1 e0       	ldi	r31, 0x01	; 1
    1cd6:	ff 2e       	mov	r15, r31
    1cd8:	f0 2d       	mov	r31, r0
						ili9341_setcursor(250,10);
						ili9341_settextcolour(WHITE,BLACK);
						ili9341_settextsize(2);
						printf("Player");
						ili9341_setcursor(250,30);
						printf("Two");
    1cda:	0f 2e       	mov	r0, r31
    1cdc:	f3 ec       	ldi	r31, 0xC3	; 195
    1cde:	8f 2e       	mov	r8, r31
    1ce0:	f1 e0       	ldi	r31, 0x01	; 1
    1ce2:	9f 2e       	mov	r9, r31
    1ce4:	f0 2d       	mov	r31, r0
    1ce6:	96 c0       	rjmp	.+300    	; 0x1e14 <main+0x68c>
				DRAW_GRID ();
				uint16_t p1X = 20;
				uint16_t p1Y = 10;
				for(int turn = 0; turn < 9 && win(board) == 0; turn++)
				{
					if((turn) % 2 == 1)
    1ce8:	c8 01       	movw	r24, r16
    1cea:	81 70       	andi	r24, 0x01	; 1
    1cec:	90 78       	andi	r25, 0x80	; 128
    1cee:	99 23       	and	r25, r25
    1cf0:	24 f4       	brge	.+8      	; 0x1cfa <main+0x572>
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	8e 6f       	ori	r24, 0xFE	; 254
    1cf6:	9f 6f       	ori	r25, 0xFF	; 255
    1cf8:	01 96       	adiw	r24, 0x01	; 1
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <main+0x578>
    1cfe:	43 c0       	rjmp	.+134    	; 0x1d86 <main+0x5fe>
					{
						ili9341_setcursor(250,10);
    1d00:	6a e0       	ldi	r22, 0x0A	; 10
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	8a ef       	ldi	r24, 0xFA	; 250
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
						ili9341_settextcolour(WHITE,BLACK);
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	8f ef       	ldi	r24, 0xFF	; 255
    1d12:	9f ef       	ldi	r25, 0xFF	; 255
    1d14:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
						ili9341_settextsize(2);
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
						printf("Player");
    1d1e:	df 92       	push	r13
    1d20:	cf 92       	push	r12
    1d22:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
						ili9341_setcursor(250,30);
    1d26:	6e e1       	ldi	r22, 0x1E	; 30
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	8a ef       	ldi	r24, 0xFA	; 250
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
						printf("Two");
    1d32:	9f 92       	push	r9
    1d34:	8f 92       	push	r8
    1d36:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
						ili9341_setcursor(250,50);
    1d3a:	62 e3       	ldi	r22, 0x32	; 50
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	8a ef       	ldi	r24, 0xFA	; 250
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
						printf("Turn");
    1d46:	ff 92       	push	r15
    1d48:	ef 92       	push	r14
    1d4a:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
						playerMove2(board,p1X,p1Y);
    1d4e:	4a e0       	ldi	r20, 0x0A	; 10
    1d50:	50 e0       	ldi	r21, 0x00	; 0
    1d52:	64 e1       	ldi	r22, 0x14	; 20
    1d54:	70 e0       	ldi	r23, 0x00	; 0
    1d56:	ce 01       	movw	r24, r28
    1d58:	01 96       	adiw	r24, 0x01	; 1
    1d5a:	0e 94 8f 0a 	call	0x151e	; 0x151e <playerMove2>
    1d5e:	af ef       	ldi	r26, 0xFF	; 255
    1d60:	b9 e6       	ldi	r27, 0x69	; 105
    1d62:	28 e1       	ldi	r18, 0x18	; 24
    1d64:	a1 50       	subi	r26, 0x01	; 1
    1d66:	b0 40       	sbci	r27, 0x00	; 0
    1d68:	20 40       	sbci	r18, 0x00	; 0
    1d6a:	e1 f7       	brne	.-8      	; 0x1d64 <main+0x5dc>
    1d6c:	00 c0       	rjmp	.+0      	; 0x1d6e <main+0x5e6>
    1d6e:	00 00       	nop
						_delay_ms(1000);
						DRAW_TURN(board);
    1d70:	ce 01       	movw	r24, r28
    1d72:	01 96       	adiw	r24, 0x01	; 1
    1d74:	0e 94 26 08 	call	0x104c	; 0x104c <DRAW_TURN>
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	42 c0       	rjmp	.+132    	; 0x1e0a <main+0x682>
	     				
					}
					else
					{
						ili9341_setcursor(250,10);
    1d86:	6a e0       	ldi	r22, 0x0A	; 10
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	8a ef       	ldi	r24, 0xFA	; 250
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
						ili9341_settextcolour(WHITE,BLACK);
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	9f ef       	ldi	r25, 0xFF	; 255
    1d9a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
						ili9341_settextsize(2);
    1d9e:	82 e0       	ldi	r24, 0x02	; 2
    1da0:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
						printf("Player");
    1da4:	df 92       	push	r13
    1da6:	cf 92       	push	r12
    1da8:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
						ili9341_setcursor(250,30);
    1dac:	6e e1       	ldi	r22, 0x1E	; 30
    1dae:	70 e0       	ldi	r23, 0x00	; 0
    1db0:	8a ef       	ldi	r24, 0xFA	; 250
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
						printf("One");
    1db8:	bf 92       	push	r11
    1dba:	af 92       	push	r10
    1dbc:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
						ili9341_setcursor(250,50);
    1dc0:	62 e3       	ldi	r22, 0x32	; 50
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	8a ef       	ldi	r24, 0xFA	; 250
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
						printf("Turn");
    1dcc:	ff 92       	push	r15
    1dce:	ef 92       	push	r14
    1dd0:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
						playerMove1(board,p1X,p1Y);
    1dd4:	4a e0       	ldi	r20, 0x0A	; 10
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	64 e1       	ldi	r22, 0x14	; 20
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	ce 01       	movw	r24, r28
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <playerMove1>
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	99 e6       	ldi	r25, 0x69	; 105
    1de8:	a8 e1       	ldi	r26, 0x18	; 24
    1dea:	81 50       	subi	r24, 0x01	; 1
    1dec:	90 40       	sbci	r25, 0x00	; 0
    1dee:	a0 40       	sbci	r26, 0x00	; 0
    1df0:	e1 f7       	brne	.-8      	; 0x1dea <main+0x662>
    1df2:	00 c0       	rjmp	.+0      	; 0x1df4 <main+0x66c>
    1df4:	00 00       	nop
						_delay_ms(1000);
						DRAW_TURN(board);
    1df6:	ce 01       	movw	r24, r28
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	0e 94 26 08 	call	0x104c	; 0x104c <DRAW_TURN>
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
		{
				ili9341_clear(BLACK);
				DRAW_GRID ();
				uint16_t p1X = 20;
				uint16_t p1Y = 10;
				for(int turn = 0; turn < 9 && win(board) == 0; turn++)
    1e0a:	0f 5f       	subi	r16, 0xFF	; 255
    1e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0e:	09 30       	cpi	r16, 0x09	; 9
    1e10:	11 05       	cpc	r17, r1
    1e12:	39 f0       	breq	.+14     	; 0x1e22 <main+0x69a>
    1e14:	ce 01       	movw	r24, r28
    1e16:	01 96       	adiw	r24, 0x01	; 1
    1e18:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <win>
    1e1c:	89 2b       	or	r24, r25
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <main+0x69a>
    1e20:	63 cf       	rjmp	.-314    	; 0x1ce8 <main+0x560>
						DRAW_TURN(board);
						
					}
				}
				
				switch(win(board))
    1e22:	ce 01       	movw	r24, r28
    1e24:	01 96       	adiw	r24, 0x01	; 1
    1e26:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <win>
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	41 f0       	breq	.+16     	; 0x1e3e <main+0x6b6>
    1e2e:	81 30       	cpi	r24, 0x01	; 1
    1e30:	91 05       	cpc	r25, r1
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <main+0x6ae>
    1e34:	41 c0       	rjmp	.+130    	; 0x1eb8 <main+0x730>
    1e36:	01 96       	adiw	r24, 0x01	; 1
    1e38:	09 f0       	breq	.+2      	; 0x1e3c <main+0x6b4>
    1e3a:	b7 c0       	rjmp	.+366    	; 0x1faa <main+0x822>
    1e3c:	7a c0       	rjmp	.+244    	; 0x1f32 <main+0x7aa>
					ili9341_setcursor(250,30);
					printf("One");
					ili9341_setcursor(250,50);
					printf("Turn");
					*/
					ili9341_setcursor(250,10);
    1e3e:	6a e0       	ldi	r22, 0x0A	; 10
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	8a ef       	ldi	r24, 0xFA	; 250
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					ili9341_settextcolour(WHITE,BLACK);
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	9f ef       	ldi	r25, 0xFF	; 255
    1e52:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
					ili9341_settextsize(2);
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
					printf("Draw  ");
    1e5c:	83 ea       	ldi	r24, 0xA3	; 163
    1e5e:	91 e0       	ldi	r25, 0x01	; 1
    1e60:	9f 93       	push	r25
    1e62:	8f 93       	push	r24
    1e64:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
					ili9341_setcursor(250,30);
    1e68:	6e e1       	ldi	r22, 0x1E	; 30
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	8a ef       	ldi	r24, 0xFA	; 250
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					printf("No one");
    1e74:	8a ea       	ldi	r24, 0xAA	; 170
    1e76:	91 e0       	ldi	r25, 0x01	; 1
    1e78:	9f 93       	push	r25
    1e7a:	8f 93       	push	r24
    1e7c:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
					ili9341_setcursor(250,50);
    1e80:	62 e3       	ldi	r22, 0x32	; 50
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	8a ef       	ldi	r24, 0xFA	; 250
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					printf("wins");
    1e8c:	81 eb       	ldi	r24, 0xB1	; 177
    1e8e:	91 e0       	ldi	r25, 0x01	; 1
    1e90:	9f 93       	push	r25
    1e92:	8f 93       	push	r24
    1e94:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
    1e98:	2f ef       	ldi	r18, 0xFF	; 255
    1e9a:	83 ed       	ldi	r24, 0xD3	; 211
    1e9c:	90 e3       	ldi	r25, 0x30	; 48
    1e9e:	21 50       	subi	r18, 0x01	; 1
    1ea0:	80 40       	sbci	r24, 0x00	; 0
    1ea2:	90 40       	sbci	r25, 0x00	; 0
    1ea4:	e1 f7       	brne	.-8      	; 0x1e9e <main+0x716>
    1ea6:	00 c0       	rjmp	.+0      	; 0x1ea8 <main+0x720>
    1ea8:	00 00       	nop
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	79 c0       	rjmp	.+242    	; 0x1faa <main+0x822>
					ili9341_setcursor(250,30);
					printf("One");
					ili9341_setcursor(250,50);
					printf("Turn");
					*/
					ili9341_setcursor(250,10);
    1eb8:	6a e0       	ldi	r22, 0x0A	; 10
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	8a ef       	ldi	r24, 0xFA	; 250
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					ili9341_settextcolour(WHITE,BLACK);
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	70 e0       	ldi	r23, 0x00	; 0
    1ec8:	8f ef       	ldi	r24, 0xFF	; 255
    1eca:	9f ef       	ldi	r25, 0xFF	; 255
    1ecc:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
					ili9341_settextsize(2);
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
					printf("Player");
    1ed6:	89 e7       	ldi	r24, 0x79	; 121
    1ed8:	91 e0       	ldi	r25, 0x01	; 1
    1eda:	9f 93       	push	r25
    1edc:	8f 93       	push	r24
    1ede:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
					ili9341_setcursor(250,30);
    1ee2:	6e e1       	ldi	r22, 0x1E	; 30
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	8a ef       	ldi	r24, 0xFA	; 250
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					printf("Two");
    1eee:	83 ec       	ldi	r24, 0xC3	; 195
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	9f 93       	push	r25
    1ef4:	8f 93       	push	r24
    1ef6:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
					ili9341_setcursor(250,50);
    1efa:	62 e3       	ldi	r22, 0x32	; 50
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	8a ef       	ldi	r24, 0xFA	; 250
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					printf("Wins");
    1f06:	8a eb       	ldi	r24, 0xBA	; 186
    1f08:	91 e0       	ldi	r25, 0x01	; 1
    1f0a:	9f 93       	push	r25
    1f0c:	8f 93       	push	r24
    1f0e:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
    1f12:	af ef       	ldi	r26, 0xFF	; 255
    1f14:	b3 ed       	ldi	r27, 0xD3	; 211
    1f16:	20 e3       	ldi	r18, 0x30	; 48
    1f18:	a1 50       	subi	r26, 0x01	; 1
    1f1a:	b0 40       	sbci	r27, 0x00	; 0
    1f1c:	20 40       	sbci	r18, 0x00	; 0
    1f1e:	e1 f7       	brne	.-8      	; 0x1f18 <main+0x790>
    1f20:	00 c0       	rjmp	.+0      	; 0x1f22 <main+0x79a>
    1f22:	00 00       	nop
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	3c c0       	rjmp	.+120    	; 0x1faa <main+0x822>
					ili9341_setcursor(250,30);
					printf("One");
					ili9341_setcursor(250,50);
					printf("Turn");
					*/
					ili9341_setcursor(250,10);
    1f32:	6a e0       	ldi	r22, 0x0A	; 10
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	8a ef       	ldi	r24, 0xFA	; 250
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					ili9341_settextcolour(WHITE,BLACK);
    1f3e:	60 e0       	ldi	r22, 0x00	; 0
    1f40:	70 e0       	ldi	r23, 0x00	; 0
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	9f ef       	ldi	r25, 0xFF	; 255
    1f46:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
					ili9341_settextsize(2);
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
					printf("Player");
    1f50:	89 e7       	ldi	r24, 0x79	; 121
    1f52:	91 e0       	ldi	r25, 0x01	; 1
    1f54:	9f 93       	push	r25
    1f56:	8f 93       	push	r24
    1f58:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
					ili9341_setcursor(250,30);
    1f5c:	6e e1       	ldi	r22, 0x1E	; 30
    1f5e:	70 e0       	ldi	r23, 0x00	; 0
    1f60:	8a ef       	ldi	r24, 0xFA	; 250
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					printf("One");
    1f68:	8f eb       	ldi	r24, 0xBF	; 191
    1f6a:	91 e0       	ldi	r25, 0x01	; 1
    1f6c:	9f 93       	push	r25
    1f6e:	8f 93       	push	r24
    1f70:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
					ili9341_setcursor(250,50);
    1f74:	62 e3       	ldi	r22, 0x32	; 50
    1f76:	70 e0       	ldi	r23, 0x00	; 0
    1f78:	8a ef       	ldi	r24, 0xFA	; 250
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
					printf("Wins");
    1f80:	8a eb       	ldi	r24, 0xBA	; 186
    1f82:	91 e0       	ldi	r25, 0x01	; 1
    1f84:	9f 93       	push	r25
    1f86:	8f 93       	push	r24
    1f88:	0e 94 0e 10 	call	0x201c	; 0x201c <printf>
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	93 ed       	ldi	r25, 0xD3	; 211
    1f90:	a0 e3       	ldi	r26, 0x30	; 48
    1f92:	81 50       	subi	r24, 0x01	; 1
    1f94:	90 40       	sbci	r25, 0x00	; 0
    1f96:	a0 40       	sbci	r26, 0x00	; 0
    1f98:	e1 f7       	brne	.-8      	; 0x1f92 <main+0x80a>
    1f9a:	00 c0       	rjmp	.+0      	; 0x1f9c <main+0x814>
    1f9c:	00 00       	nop
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
					_delay_ms(2000);
					break;
				}
		}
	ili9341_clear(RED);
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	98 ef       	ldi	r25, 0xF8	; 248
    1fae:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <ili9341_clear>
	ili9341_setcursor(20,100);
    1fb2:	64 e6       	ldi	r22, 0x64	; 100
    1fb4:	70 e0       	ldi	r23, 0x00	; 0
    1fb6:	84 e1       	ldi	r24, 0x14	; 20
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ili9341_setcursor>
	ili9341_settextcolour(GREEN,RED);
    1fbe:	60 e0       	ldi	r22, 0x00	; 0
    1fc0:	78 ef       	ldi	r23, 0xF8	; 248
    1fc2:	80 ee       	ldi	r24, 0xE0	; 224
    1fc4:	97 e0       	ldi	r25, 0x07	; 7
    1fc6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <ili9341_settextcolour>
	ili9341_settextsize(5);
    1fca:	85 e0       	ldi	r24, 0x05	; 5
    1fcc:	0e 94 d7 06 	call	0xdae	; 0xdae <ili9341_settextsize>
	printf("GAME OVER \n");
    1fd0:	87 ec       	ldi	r24, 0xC7	; 199
    1fd2:	91 e0       	ldi	r25, 0x01	; 1
    1fd4:	0e 94 2b 10 	call	0x2056	; 0x2056 <puts>
    1fd8:	bf ef       	ldi	r27, 0xFF	; 255
    1fda:	23 ed       	ldi	r18, 0xD3	; 211
    1fdc:	80 e3       	ldi	r24, 0x30	; 48
    1fde:	b1 50       	subi	r27, 0x01	; 1
    1fe0:	20 40       	sbci	r18, 0x00	; 0
    1fe2:	80 40       	sbci	r24, 0x00	; 0
    1fe4:	e1 f7       	brne	.-8      	; 0x1fde <main+0x856>
    1fe6:	00 c0       	rjmp	.+0      	; 0x1fe8 <main+0x860>
    1fe8:	00 00       	nop
	_delay_ms(2000);
	return 0;
	}
	
  
}
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	62 96       	adiw	r28, 0x12	; 18
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	ff 90       	pop	r15
    2004:	ef 90       	pop	r14
    2006:	df 90       	pop	r13
    2008:	cf 90       	pop	r12
    200a:	bf 90       	pop	r11
    200c:	af 90       	pop	r10
    200e:	9f 90       	pop	r9
    2010:	8f 90       	pop	r8
    2012:	7f 90       	pop	r7
    2014:	6f 90       	pop	r6
    2016:	5f 90       	pop	r5
    2018:	4f 90       	pop	r4
    201a:	08 95       	ret

0000201c <printf>:
    201c:	a0 e0       	ldi	r26, 0x00	; 0
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e4 e1       	ldi	r30, 0x14	; 20
    2022:	f0 e1       	ldi	r31, 0x10	; 16
    2024:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__prologue_saves__+0x20>
    2028:	ae 01       	movw	r20, r28
    202a:	4b 5f       	subi	r20, 0xFB	; 251
    202c:	5f 4f       	sbci	r21, 0xFF	; 255
    202e:	fa 01       	movw	r30, r20
    2030:	61 91       	ld	r22, Z+
    2032:	71 91       	ld	r23, Z+
    2034:	af 01       	movw	r20, r30
    2036:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <__iob+0x2>
    203a:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <__iob+0x3>
    203e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <vfprintf>
    2042:	e2 e0       	ldi	r30, 0x02	; 2
    2044:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__epilogue_restores__+0x20>

00002048 <putchar>:
    2048:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <__iob+0x2>
    204c:	70 91 ee 01 	lds	r23, 0x01EE	; 0x8001ee <__iob+0x3>
    2050:	0e 94 52 12 	call	0x24a4	; 0x24a4 <fputc>
    2054:	08 95       	ret

00002056 <puts>:
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <__iob+0x2>
    2062:	f0 91 ee 01 	lds	r31, 0x01EE	; 0x8001ee <__iob+0x3>
    2066:	23 81       	ldd	r18, Z+3	; 0x03
    2068:	21 ff       	sbrs	r18, 1
    206a:	1b c0       	rjmp	.+54     	; 0x20a2 <puts+0x4c>
    206c:	8c 01       	movw	r16, r24
    206e:	d0 e0       	ldi	r29, 0x00	; 0
    2070:	c0 e0       	ldi	r28, 0x00	; 0
    2072:	f8 01       	movw	r30, r16
    2074:	81 91       	ld	r24, Z+
    2076:	8f 01       	movw	r16, r30
    2078:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <__iob+0x2>
    207c:	70 91 ee 01 	lds	r23, 0x01EE	; 0x8001ee <__iob+0x3>
    2080:	db 01       	movw	r26, r22
    2082:	18 96       	adiw	r26, 0x08	; 8
    2084:	ed 91       	ld	r30, X+
    2086:	fc 91       	ld	r31, X
    2088:	19 97       	sbiw	r26, 0x09	; 9
    208a:	88 23       	and	r24, r24
    208c:	31 f0       	breq	.+12     	; 0x209a <puts+0x44>
    208e:	09 95       	icall
    2090:	89 2b       	or	r24, r25
    2092:	79 f3       	breq	.-34     	; 0x2072 <puts+0x1c>
    2094:	df ef       	ldi	r29, 0xFF	; 255
    2096:	cf ef       	ldi	r28, 0xFF	; 255
    2098:	ec cf       	rjmp	.-40     	; 0x2072 <puts+0x1c>
    209a:	8a e0       	ldi	r24, 0x0A	; 10
    209c:	09 95       	icall
    209e:	89 2b       	or	r24, r25
    20a0:	19 f0       	breq	.+6      	; 0x20a8 <puts+0x52>
    20a2:	8f ef       	ldi	r24, 0xFF	; 255
    20a4:	9f ef       	ldi	r25, 0xFF	; 255
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <puts+0x56>
    20a8:	8d 2f       	mov	r24, r29
    20aa:	9c 2f       	mov	r25, r28
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	0f 91       	pop	r16
    20b4:	08 95       	ret

000020b6 <vfprintf>:
    20b6:	ab e0       	ldi	r26, 0x0B	; 11
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e1 e6       	ldi	r30, 0x61	; 97
    20bc:	f0 e1       	ldi	r31, 0x10	; 16
    20be:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__prologue_saves__>
    20c2:	6c 01       	movw	r12, r24
    20c4:	7b 01       	movw	r14, r22
    20c6:	8a 01       	movw	r16, r20
    20c8:	fc 01       	movw	r30, r24
    20ca:	17 82       	std	Z+7, r1	; 0x07
    20cc:	16 82       	std	Z+6, r1	; 0x06
    20ce:	83 81       	ldd	r24, Z+3	; 0x03
    20d0:	81 ff       	sbrs	r24, 1
    20d2:	cc c1       	rjmp	.+920    	; 0x246c <vfprintf+0x3b6>
    20d4:	ce 01       	movw	r24, r28
    20d6:	01 96       	adiw	r24, 0x01	; 1
    20d8:	3c 01       	movw	r6, r24
    20da:	f6 01       	movw	r30, r12
    20dc:	93 81       	ldd	r25, Z+3	; 0x03
    20de:	f7 01       	movw	r30, r14
    20e0:	93 fd       	sbrc	r25, 3
    20e2:	85 91       	lpm	r24, Z+
    20e4:	93 ff       	sbrs	r25, 3
    20e6:	81 91       	ld	r24, Z+
    20e8:	7f 01       	movw	r14, r30
    20ea:	88 23       	and	r24, r24
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <vfprintf+0x3a>
    20ee:	ba c1       	rjmp	.+884    	; 0x2464 <vfprintf+0x3ae>
    20f0:	85 32       	cpi	r24, 0x25	; 37
    20f2:	39 f4       	brne	.+14     	; 0x2102 <vfprintf+0x4c>
    20f4:	93 fd       	sbrc	r25, 3
    20f6:	85 91       	lpm	r24, Z+
    20f8:	93 ff       	sbrs	r25, 3
    20fa:	81 91       	ld	r24, Z+
    20fc:	7f 01       	movw	r14, r30
    20fe:	85 32       	cpi	r24, 0x25	; 37
    2100:	29 f4       	brne	.+10     	; 0x210c <vfprintf+0x56>
    2102:	b6 01       	movw	r22, r12
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	0e 94 52 12 	call	0x24a4	; 0x24a4 <fputc>
    210a:	e7 cf       	rjmp	.-50     	; 0x20da <vfprintf+0x24>
    210c:	91 2c       	mov	r9, r1
    210e:	21 2c       	mov	r2, r1
    2110:	31 2c       	mov	r3, r1
    2112:	ff e1       	ldi	r31, 0x1F	; 31
    2114:	f3 15       	cp	r31, r3
    2116:	d8 f0       	brcs	.+54     	; 0x214e <vfprintf+0x98>
    2118:	8b 32       	cpi	r24, 0x2B	; 43
    211a:	79 f0       	breq	.+30     	; 0x213a <vfprintf+0x84>
    211c:	38 f4       	brcc	.+14     	; 0x212c <vfprintf+0x76>
    211e:	80 32       	cpi	r24, 0x20	; 32
    2120:	79 f0       	breq	.+30     	; 0x2140 <vfprintf+0x8a>
    2122:	83 32       	cpi	r24, 0x23	; 35
    2124:	a1 f4       	brne	.+40     	; 0x214e <vfprintf+0x98>
    2126:	23 2d       	mov	r18, r3
    2128:	20 61       	ori	r18, 0x10	; 16
    212a:	1d c0       	rjmp	.+58     	; 0x2166 <vfprintf+0xb0>
    212c:	8d 32       	cpi	r24, 0x2D	; 45
    212e:	61 f0       	breq	.+24     	; 0x2148 <vfprintf+0x92>
    2130:	80 33       	cpi	r24, 0x30	; 48
    2132:	69 f4       	brne	.+26     	; 0x214e <vfprintf+0x98>
    2134:	23 2d       	mov	r18, r3
    2136:	21 60       	ori	r18, 0x01	; 1
    2138:	16 c0       	rjmp	.+44     	; 0x2166 <vfprintf+0xb0>
    213a:	83 2d       	mov	r24, r3
    213c:	82 60       	ori	r24, 0x02	; 2
    213e:	38 2e       	mov	r3, r24
    2140:	e3 2d       	mov	r30, r3
    2142:	e4 60       	ori	r30, 0x04	; 4
    2144:	3e 2e       	mov	r3, r30
    2146:	2a c0       	rjmp	.+84     	; 0x219c <vfprintf+0xe6>
    2148:	f3 2d       	mov	r31, r3
    214a:	f8 60       	ori	r31, 0x08	; 8
    214c:	1d c0       	rjmp	.+58     	; 0x2188 <vfprintf+0xd2>
    214e:	37 fc       	sbrc	r3, 7
    2150:	2d c0       	rjmp	.+90     	; 0x21ac <vfprintf+0xf6>
    2152:	20 ed       	ldi	r18, 0xD0	; 208
    2154:	28 0f       	add	r18, r24
    2156:	2a 30       	cpi	r18, 0x0A	; 10
    2158:	40 f0       	brcs	.+16     	; 0x216a <vfprintf+0xb4>
    215a:	8e 32       	cpi	r24, 0x2E	; 46
    215c:	b9 f4       	brne	.+46     	; 0x218c <vfprintf+0xd6>
    215e:	36 fc       	sbrc	r3, 6
    2160:	81 c1       	rjmp	.+770    	; 0x2464 <vfprintf+0x3ae>
    2162:	23 2d       	mov	r18, r3
    2164:	20 64       	ori	r18, 0x40	; 64
    2166:	32 2e       	mov	r3, r18
    2168:	19 c0       	rjmp	.+50     	; 0x219c <vfprintf+0xe6>
    216a:	36 fe       	sbrs	r3, 6
    216c:	06 c0       	rjmp	.+12     	; 0x217a <vfprintf+0xc4>
    216e:	8a e0       	ldi	r24, 0x0A	; 10
    2170:	98 9e       	mul	r9, r24
    2172:	20 0d       	add	r18, r0
    2174:	11 24       	eor	r1, r1
    2176:	92 2e       	mov	r9, r18
    2178:	11 c0       	rjmp	.+34     	; 0x219c <vfprintf+0xe6>
    217a:	ea e0       	ldi	r30, 0x0A	; 10
    217c:	2e 9e       	mul	r2, r30
    217e:	20 0d       	add	r18, r0
    2180:	11 24       	eor	r1, r1
    2182:	22 2e       	mov	r2, r18
    2184:	f3 2d       	mov	r31, r3
    2186:	f0 62       	ori	r31, 0x20	; 32
    2188:	3f 2e       	mov	r3, r31
    218a:	08 c0       	rjmp	.+16     	; 0x219c <vfprintf+0xe6>
    218c:	8c 36       	cpi	r24, 0x6C	; 108
    218e:	21 f4       	brne	.+8      	; 0x2198 <vfprintf+0xe2>
    2190:	83 2d       	mov	r24, r3
    2192:	80 68       	ori	r24, 0x80	; 128
    2194:	38 2e       	mov	r3, r24
    2196:	02 c0       	rjmp	.+4      	; 0x219c <vfprintf+0xe6>
    2198:	88 36       	cpi	r24, 0x68	; 104
    219a:	41 f4       	brne	.+16     	; 0x21ac <vfprintf+0xf6>
    219c:	f7 01       	movw	r30, r14
    219e:	93 fd       	sbrc	r25, 3
    21a0:	85 91       	lpm	r24, Z+
    21a2:	93 ff       	sbrs	r25, 3
    21a4:	81 91       	ld	r24, Z+
    21a6:	7f 01       	movw	r14, r30
    21a8:	81 11       	cpse	r24, r1
    21aa:	b3 cf       	rjmp	.-154    	; 0x2112 <vfprintf+0x5c>
    21ac:	98 2f       	mov	r25, r24
    21ae:	9f 7d       	andi	r25, 0xDF	; 223
    21b0:	95 54       	subi	r25, 0x45	; 69
    21b2:	93 30       	cpi	r25, 0x03	; 3
    21b4:	28 f4       	brcc	.+10     	; 0x21c0 <vfprintf+0x10a>
    21b6:	0c 5f       	subi	r16, 0xFC	; 252
    21b8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ba:	9f e3       	ldi	r25, 0x3F	; 63
    21bc:	99 83       	std	Y+1, r25	; 0x01
    21be:	0d c0       	rjmp	.+26     	; 0x21da <vfprintf+0x124>
    21c0:	83 36       	cpi	r24, 0x63	; 99
    21c2:	31 f0       	breq	.+12     	; 0x21d0 <vfprintf+0x11a>
    21c4:	83 37       	cpi	r24, 0x73	; 115
    21c6:	71 f0       	breq	.+28     	; 0x21e4 <vfprintf+0x12e>
    21c8:	83 35       	cpi	r24, 0x53	; 83
    21ca:	09 f0       	breq	.+2      	; 0x21ce <vfprintf+0x118>
    21cc:	59 c0       	rjmp	.+178    	; 0x2280 <vfprintf+0x1ca>
    21ce:	21 c0       	rjmp	.+66     	; 0x2212 <vfprintf+0x15c>
    21d0:	f8 01       	movw	r30, r16
    21d2:	80 81       	ld	r24, Z
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	0e 5f       	subi	r16, 0xFE	; 254
    21d8:	1f 4f       	sbci	r17, 0xFF	; 255
    21da:	88 24       	eor	r8, r8
    21dc:	83 94       	inc	r8
    21de:	91 2c       	mov	r9, r1
    21e0:	53 01       	movw	r10, r6
    21e2:	13 c0       	rjmp	.+38     	; 0x220a <vfprintf+0x154>
    21e4:	28 01       	movw	r4, r16
    21e6:	f2 e0       	ldi	r31, 0x02	; 2
    21e8:	4f 0e       	add	r4, r31
    21ea:	51 1c       	adc	r5, r1
    21ec:	f8 01       	movw	r30, r16
    21ee:	a0 80       	ld	r10, Z
    21f0:	b1 80       	ldd	r11, Z+1	; 0x01
    21f2:	36 fe       	sbrs	r3, 6
    21f4:	03 c0       	rjmp	.+6      	; 0x21fc <vfprintf+0x146>
    21f6:	69 2d       	mov	r22, r9
    21f8:	70 e0       	ldi	r23, 0x00	; 0
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <vfprintf+0x14a>
    21fc:	6f ef       	ldi	r22, 0xFF	; 255
    21fe:	7f ef       	ldi	r23, 0xFF	; 255
    2200:	c5 01       	movw	r24, r10
    2202:	0e 94 47 12 	call	0x248e	; 0x248e <strnlen>
    2206:	4c 01       	movw	r8, r24
    2208:	82 01       	movw	r16, r4
    220a:	f3 2d       	mov	r31, r3
    220c:	ff 77       	andi	r31, 0x7F	; 127
    220e:	3f 2e       	mov	r3, r31
    2210:	16 c0       	rjmp	.+44     	; 0x223e <vfprintf+0x188>
    2212:	28 01       	movw	r4, r16
    2214:	22 e0       	ldi	r18, 0x02	; 2
    2216:	42 0e       	add	r4, r18
    2218:	51 1c       	adc	r5, r1
    221a:	f8 01       	movw	r30, r16
    221c:	a0 80       	ld	r10, Z
    221e:	b1 80       	ldd	r11, Z+1	; 0x01
    2220:	36 fe       	sbrs	r3, 6
    2222:	03 c0       	rjmp	.+6      	; 0x222a <vfprintf+0x174>
    2224:	69 2d       	mov	r22, r9
    2226:	70 e0       	ldi	r23, 0x00	; 0
    2228:	02 c0       	rjmp	.+4      	; 0x222e <vfprintf+0x178>
    222a:	6f ef       	ldi	r22, 0xFF	; 255
    222c:	7f ef       	ldi	r23, 0xFF	; 255
    222e:	c5 01       	movw	r24, r10
    2230:	0e 94 3c 12 	call	0x2478	; 0x2478 <strnlen_P>
    2234:	4c 01       	movw	r8, r24
    2236:	f3 2d       	mov	r31, r3
    2238:	f0 68       	ori	r31, 0x80	; 128
    223a:	3f 2e       	mov	r3, r31
    223c:	82 01       	movw	r16, r4
    223e:	33 fc       	sbrc	r3, 3
    2240:	1b c0       	rjmp	.+54     	; 0x2278 <vfprintf+0x1c2>
    2242:	82 2d       	mov	r24, r2
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	88 16       	cp	r8, r24
    2248:	99 06       	cpc	r9, r25
    224a:	b0 f4       	brcc	.+44     	; 0x2278 <vfprintf+0x1c2>
    224c:	b6 01       	movw	r22, r12
    224e:	80 e2       	ldi	r24, 0x20	; 32
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 52 12 	call	0x24a4	; 0x24a4 <fputc>
    2256:	2a 94       	dec	r2
    2258:	f4 cf       	rjmp	.-24     	; 0x2242 <vfprintf+0x18c>
    225a:	f5 01       	movw	r30, r10
    225c:	37 fc       	sbrc	r3, 7
    225e:	85 91       	lpm	r24, Z+
    2260:	37 fe       	sbrs	r3, 7
    2262:	81 91       	ld	r24, Z+
    2264:	5f 01       	movw	r10, r30
    2266:	b6 01       	movw	r22, r12
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	0e 94 52 12 	call	0x24a4	; 0x24a4 <fputc>
    226e:	21 10       	cpse	r2, r1
    2270:	2a 94       	dec	r2
    2272:	21 e0       	ldi	r18, 0x01	; 1
    2274:	82 1a       	sub	r8, r18
    2276:	91 08       	sbc	r9, r1
    2278:	81 14       	cp	r8, r1
    227a:	91 04       	cpc	r9, r1
    227c:	71 f7       	brne	.-36     	; 0x225a <vfprintf+0x1a4>
    227e:	e8 c0       	rjmp	.+464    	; 0x2450 <vfprintf+0x39a>
    2280:	84 36       	cpi	r24, 0x64	; 100
    2282:	11 f0       	breq	.+4      	; 0x2288 <vfprintf+0x1d2>
    2284:	89 36       	cpi	r24, 0x69	; 105
    2286:	41 f5       	brne	.+80     	; 0x22d8 <vfprintf+0x222>
    2288:	f8 01       	movw	r30, r16
    228a:	37 fe       	sbrs	r3, 7
    228c:	07 c0       	rjmp	.+14     	; 0x229c <vfprintf+0x1e6>
    228e:	60 81       	ld	r22, Z
    2290:	71 81       	ldd	r23, Z+1	; 0x01
    2292:	82 81       	ldd	r24, Z+2	; 0x02
    2294:	93 81       	ldd	r25, Z+3	; 0x03
    2296:	0c 5f       	subi	r16, 0xFC	; 252
    2298:	1f 4f       	sbci	r17, 0xFF	; 255
    229a:	08 c0       	rjmp	.+16     	; 0x22ac <vfprintf+0x1f6>
    229c:	60 81       	ld	r22, Z
    229e:	71 81       	ldd	r23, Z+1	; 0x01
    22a0:	07 2e       	mov	r0, r23
    22a2:	00 0c       	add	r0, r0
    22a4:	88 0b       	sbc	r24, r24
    22a6:	99 0b       	sbc	r25, r25
    22a8:	0e 5f       	subi	r16, 0xFE	; 254
    22aa:	1f 4f       	sbci	r17, 0xFF	; 255
    22ac:	f3 2d       	mov	r31, r3
    22ae:	ff 76       	andi	r31, 0x6F	; 111
    22b0:	3f 2e       	mov	r3, r31
    22b2:	97 ff       	sbrs	r25, 7
    22b4:	09 c0       	rjmp	.+18     	; 0x22c8 <vfprintf+0x212>
    22b6:	90 95       	com	r25
    22b8:	80 95       	com	r24
    22ba:	70 95       	com	r23
    22bc:	61 95       	neg	r22
    22be:	7f 4f       	sbci	r23, 0xFF	; 255
    22c0:	8f 4f       	sbci	r24, 0xFF	; 255
    22c2:	9f 4f       	sbci	r25, 0xFF	; 255
    22c4:	f0 68       	ori	r31, 0x80	; 128
    22c6:	3f 2e       	mov	r3, r31
    22c8:	2a e0       	ldi	r18, 0x0A	; 10
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	a3 01       	movw	r20, r6
    22ce:	0e 94 8e 12 	call	0x251c	; 0x251c <__ultoa_invert>
    22d2:	88 2e       	mov	r8, r24
    22d4:	86 18       	sub	r8, r6
    22d6:	45 c0       	rjmp	.+138    	; 0x2362 <vfprintf+0x2ac>
    22d8:	85 37       	cpi	r24, 0x75	; 117
    22da:	31 f4       	brne	.+12     	; 0x22e8 <vfprintf+0x232>
    22dc:	23 2d       	mov	r18, r3
    22de:	2f 7e       	andi	r18, 0xEF	; 239
    22e0:	b2 2e       	mov	r11, r18
    22e2:	2a e0       	ldi	r18, 0x0A	; 10
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	25 c0       	rjmp	.+74     	; 0x2332 <vfprintf+0x27c>
    22e8:	93 2d       	mov	r25, r3
    22ea:	99 7f       	andi	r25, 0xF9	; 249
    22ec:	b9 2e       	mov	r11, r25
    22ee:	8f 36       	cpi	r24, 0x6F	; 111
    22f0:	c1 f0       	breq	.+48     	; 0x2322 <vfprintf+0x26c>
    22f2:	18 f4       	brcc	.+6      	; 0x22fa <vfprintf+0x244>
    22f4:	88 35       	cpi	r24, 0x58	; 88
    22f6:	79 f0       	breq	.+30     	; 0x2316 <vfprintf+0x260>
    22f8:	b5 c0       	rjmp	.+362    	; 0x2464 <vfprintf+0x3ae>
    22fa:	80 37       	cpi	r24, 0x70	; 112
    22fc:	19 f0       	breq	.+6      	; 0x2304 <vfprintf+0x24e>
    22fe:	88 37       	cpi	r24, 0x78	; 120
    2300:	21 f0       	breq	.+8      	; 0x230a <vfprintf+0x254>
    2302:	b0 c0       	rjmp	.+352    	; 0x2464 <vfprintf+0x3ae>
    2304:	e9 2f       	mov	r30, r25
    2306:	e0 61       	ori	r30, 0x10	; 16
    2308:	be 2e       	mov	r11, r30
    230a:	b4 fe       	sbrs	r11, 4
    230c:	0d c0       	rjmp	.+26     	; 0x2328 <vfprintf+0x272>
    230e:	fb 2d       	mov	r31, r11
    2310:	f4 60       	ori	r31, 0x04	; 4
    2312:	bf 2e       	mov	r11, r31
    2314:	09 c0       	rjmp	.+18     	; 0x2328 <vfprintf+0x272>
    2316:	34 fe       	sbrs	r3, 4
    2318:	0a c0       	rjmp	.+20     	; 0x232e <vfprintf+0x278>
    231a:	29 2f       	mov	r18, r25
    231c:	26 60       	ori	r18, 0x06	; 6
    231e:	b2 2e       	mov	r11, r18
    2320:	06 c0       	rjmp	.+12     	; 0x232e <vfprintf+0x278>
    2322:	28 e0       	ldi	r18, 0x08	; 8
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	05 c0       	rjmp	.+10     	; 0x2332 <vfprintf+0x27c>
    2328:	20 e1       	ldi	r18, 0x10	; 16
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <vfprintf+0x27c>
    232e:	20 e1       	ldi	r18, 0x10	; 16
    2330:	32 e0       	ldi	r19, 0x02	; 2
    2332:	f8 01       	movw	r30, r16
    2334:	b7 fe       	sbrs	r11, 7
    2336:	07 c0       	rjmp	.+14     	; 0x2346 <vfprintf+0x290>
    2338:	60 81       	ld	r22, Z
    233a:	71 81       	ldd	r23, Z+1	; 0x01
    233c:	82 81       	ldd	r24, Z+2	; 0x02
    233e:	93 81       	ldd	r25, Z+3	; 0x03
    2340:	0c 5f       	subi	r16, 0xFC	; 252
    2342:	1f 4f       	sbci	r17, 0xFF	; 255
    2344:	06 c0       	rjmp	.+12     	; 0x2352 <vfprintf+0x29c>
    2346:	60 81       	ld	r22, Z
    2348:	71 81       	ldd	r23, Z+1	; 0x01
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	0e 5f       	subi	r16, 0xFE	; 254
    2350:	1f 4f       	sbci	r17, 0xFF	; 255
    2352:	a3 01       	movw	r20, r6
    2354:	0e 94 8e 12 	call	0x251c	; 0x251c <__ultoa_invert>
    2358:	88 2e       	mov	r8, r24
    235a:	86 18       	sub	r8, r6
    235c:	fb 2d       	mov	r31, r11
    235e:	ff 77       	andi	r31, 0x7F	; 127
    2360:	3f 2e       	mov	r3, r31
    2362:	36 fe       	sbrs	r3, 6
    2364:	0d c0       	rjmp	.+26     	; 0x2380 <vfprintf+0x2ca>
    2366:	23 2d       	mov	r18, r3
    2368:	2e 7f       	andi	r18, 0xFE	; 254
    236a:	a2 2e       	mov	r10, r18
    236c:	89 14       	cp	r8, r9
    236e:	58 f4       	brcc	.+22     	; 0x2386 <vfprintf+0x2d0>
    2370:	34 fe       	sbrs	r3, 4
    2372:	0b c0       	rjmp	.+22     	; 0x238a <vfprintf+0x2d4>
    2374:	32 fc       	sbrc	r3, 2
    2376:	09 c0       	rjmp	.+18     	; 0x238a <vfprintf+0x2d4>
    2378:	83 2d       	mov	r24, r3
    237a:	8e 7e       	andi	r24, 0xEE	; 238
    237c:	a8 2e       	mov	r10, r24
    237e:	05 c0       	rjmp	.+10     	; 0x238a <vfprintf+0x2d4>
    2380:	b8 2c       	mov	r11, r8
    2382:	a3 2c       	mov	r10, r3
    2384:	03 c0       	rjmp	.+6      	; 0x238c <vfprintf+0x2d6>
    2386:	b8 2c       	mov	r11, r8
    2388:	01 c0       	rjmp	.+2      	; 0x238c <vfprintf+0x2d6>
    238a:	b9 2c       	mov	r11, r9
    238c:	a4 fe       	sbrs	r10, 4
    238e:	0f c0       	rjmp	.+30     	; 0x23ae <vfprintf+0x2f8>
    2390:	fe 01       	movw	r30, r28
    2392:	e8 0d       	add	r30, r8
    2394:	f1 1d       	adc	r31, r1
    2396:	80 81       	ld	r24, Z
    2398:	80 33       	cpi	r24, 0x30	; 48
    239a:	21 f4       	brne	.+8      	; 0x23a4 <vfprintf+0x2ee>
    239c:	9a 2d       	mov	r25, r10
    239e:	99 7e       	andi	r25, 0xE9	; 233
    23a0:	a9 2e       	mov	r10, r25
    23a2:	09 c0       	rjmp	.+18     	; 0x23b6 <vfprintf+0x300>
    23a4:	a2 fe       	sbrs	r10, 2
    23a6:	06 c0       	rjmp	.+12     	; 0x23b4 <vfprintf+0x2fe>
    23a8:	b3 94       	inc	r11
    23aa:	b3 94       	inc	r11
    23ac:	04 c0       	rjmp	.+8      	; 0x23b6 <vfprintf+0x300>
    23ae:	8a 2d       	mov	r24, r10
    23b0:	86 78       	andi	r24, 0x86	; 134
    23b2:	09 f0       	breq	.+2      	; 0x23b6 <vfprintf+0x300>
    23b4:	b3 94       	inc	r11
    23b6:	a3 fc       	sbrc	r10, 3
    23b8:	11 c0       	rjmp	.+34     	; 0x23dc <vfprintf+0x326>
    23ba:	a0 fe       	sbrs	r10, 0
    23bc:	06 c0       	rjmp	.+12     	; 0x23ca <vfprintf+0x314>
    23be:	b2 14       	cp	r11, r2
    23c0:	88 f4       	brcc	.+34     	; 0x23e4 <vfprintf+0x32e>
    23c2:	28 0c       	add	r2, r8
    23c4:	92 2c       	mov	r9, r2
    23c6:	9b 18       	sub	r9, r11
    23c8:	0e c0       	rjmp	.+28     	; 0x23e6 <vfprintf+0x330>
    23ca:	b2 14       	cp	r11, r2
    23cc:	60 f4       	brcc	.+24     	; 0x23e6 <vfprintf+0x330>
    23ce:	b6 01       	movw	r22, r12
    23d0:	80 e2       	ldi	r24, 0x20	; 32
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	0e 94 52 12 	call	0x24a4	; 0x24a4 <fputc>
    23d8:	b3 94       	inc	r11
    23da:	f7 cf       	rjmp	.-18     	; 0x23ca <vfprintf+0x314>
    23dc:	b2 14       	cp	r11, r2
    23de:	18 f4       	brcc	.+6      	; 0x23e6 <vfprintf+0x330>
    23e0:	2b 18       	sub	r2, r11
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <vfprintf+0x332>
    23e4:	98 2c       	mov	r9, r8
    23e6:	21 2c       	mov	r2, r1
    23e8:	a4 fe       	sbrs	r10, 4
    23ea:	10 c0       	rjmp	.+32     	; 0x240c <vfprintf+0x356>
    23ec:	b6 01       	movw	r22, r12
    23ee:	80 e3       	ldi	r24, 0x30	; 48
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	0e 94 52 12 	call	0x24a4	; 0x24a4 <fputc>
    23f6:	a2 fe       	sbrs	r10, 2
    23f8:	17 c0       	rjmp	.+46     	; 0x2428 <vfprintf+0x372>
    23fa:	a1 fc       	sbrc	r10, 1
    23fc:	03 c0       	rjmp	.+6      	; 0x2404 <vfprintf+0x34e>
    23fe:	88 e7       	ldi	r24, 0x78	; 120
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <vfprintf+0x352>
    2404:	88 e5       	ldi	r24, 0x58	; 88
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	b6 01       	movw	r22, r12
    240a:	0c c0       	rjmp	.+24     	; 0x2424 <vfprintf+0x36e>
    240c:	8a 2d       	mov	r24, r10
    240e:	86 78       	andi	r24, 0x86	; 134
    2410:	59 f0       	breq	.+22     	; 0x2428 <vfprintf+0x372>
    2412:	a1 fe       	sbrs	r10, 1
    2414:	02 c0       	rjmp	.+4      	; 0x241a <vfprintf+0x364>
    2416:	8b e2       	ldi	r24, 0x2B	; 43
    2418:	01 c0       	rjmp	.+2      	; 0x241c <vfprintf+0x366>
    241a:	80 e2       	ldi	r24, 0x20	; 32
    241c:	a7 fc       	sbrc	r10, 7
    241e:	8d e2       	ldi	r24, 0x2D	; 45
    2420:	b6 01       	movw	r22, r12
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	0e 94 52 12 	call	0x24a4	; 0x24a4 <fputc>
    2428:	89 14       	cp	r8, r9
    242a:	38 f4       	brcc	.+14     	; 0x243a <vfprintf+0x384>
    242c:	b6 01       	movw	r22, r12
    242e:	80 e3       	ldi	r24, 0x30	; 48
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 52 12 	call	0x24a4	; 0x24a4 <fputc>
    2436:	9a 94       	dec	r9
    2438:	f7 cf       	rjmp	.-18     	; 0x2428 <vfprintf+0x372>
    243a:	8a 94       	dec	r8
    243c:	f3 01       	movw	r30, r6
    243e:	e8 0d       	add	r30, r8
    2440:	f1 1d       	adc	r31, r1
    2442:	80 81       	ld	r24, Z
    2444:	b6 01       	movw	r22, r12
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	0e 94 52 12 	call	0x24a4	; 0x24a4 <fputc>
    244c:	81 10       	cpse	r8, r1
    244e:	f5 cf       	rjmp	.-22     	; 0x243a <vfprintf+0x384>
    2450:	22 20       	and	r2, r2
    2452:	09 f4       	brne	.+2      	; 0x2456 <vfprintf+0x3a0>
    2454:	42 ce       	rjmp	.-892    	; 0x20da <vfprintf+0x24>
    2456:	b6 01       	movw	r22, r12
    2458:	80 e2       	ldi	r24, 0x20	; 32
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	0e 94 52 12 	call	0x24a4	; 0x24a4 <fputc>
    2460:	2a 94       	dec	r2
    2462:	f6 cf       	rjmp	.-20     	; 0x2450 <vfprintf+0x39a>
    2464:	f6 01       	movw	r30, r12
    2466:	86 81       	ldd	r24, Z+6	; 0x06
    2468:	97 81       	ldd	r25, Z+7	; 0x07
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <vfprintf+0x3ba>
    246c:	8f ef       	ldi	r24, 0xFF	; 255
    246e:	9f ef       	ldi	r25, 0xFF	; 255
    2470:	2b 96       	adiw	r28, 0x0b	; 11
    2472:	e2 e1       	ldi	r30, 0x12	; 18
    2474:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__epilogue_restores__>

00002478 <strnlen_P>:
    2478:	fc 01       	movw	r30, r24
    247a:	05 90       	lpm	r0, Z+
    247c:	61 50       	subi	r22, 0x01	; 1
    247e:	70 40       	sbci	r23, 0x00	; 0
    2480:	01 10       	cpse	r0, r1
    2482:	d8 f7       	brcc	.-10     	; 0x247a <strnlen_P+0x2>
    2484:	80 95       	com	r24
    2486:	90 95       	com	r25
    2488:	8e 0f       	add	r24, r30
    248a:	9f 1f       	adc	r25, r31
    248c:	08 95       	ret

0000248e <strnlen>:
    248e:	fc 01       	movw	r30, r24
    2490:	61 50       	subi	r22, 0x01	; 1
    2492:	70 40       	sbci	r23, 0x00	; 0
    2494:	01 90       	ld	r0, Z+
    2496:	01 10       	cpse	r0, r1
    2498:	d8 f7       	brcc	.-10     	; 0x2490 <strnlen+0x2>
    249a:	80 95       	com	r24
    249c:	90 95       	com	r25
    249e:	8e 0f       	add	r24, r30
    24a0:	9f 1f       	adc	r25, r31
    24a2:	08 95       	ret

000024a4 <fputc>:
    24a4:	0f 93       	push	r16
    24a6:	1f 93       	push	r17
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	fb 01       	movw	r30, r22
    24ae:	23 81       	ldd	r18, Z+3	; 0x03
    24b0:	21 fd       	sbrc	r18, 1
    24b2:	03 c0       	rjmp	.+6      	; 0x24ba <fputc+0x16>
    24b4:	8f ef       	ldi	r24, 0xFF	; 255
    24b6:	9f ef       	ldi	r25, 0xFF	; 255
    24b8:	2c c0       	rjmp	.+88     	; 0x2512 <fputc+0x6e>
    24ba:	22 ff       	sbrs	r18, 2
    24bc:	16 c0       	rjmp	.+44     	; 0x24ea <fputc+0x46>
    24be:	46 81       	ldd	r20, Z+6	; 0x06
    24c0:	57 81       	ldd	r21, Z+7	; 0x07
    24c2:	24 81       	ldd	r18, Z+4	; 0x04
    24c4:	35 81       	ldd	r19, Z+5	; 0x05
    24c6:	42 17       	cp	r20, r18
    24c8:	53 07       	cpc	r21, r19
    24ca:	44 f4       	brge	.+16     	; 0x24dc <fputc+0x38>
    24cc:	a0 81       	ld	r26, Z
    24ce:	b1 81       	ldd	r27, Z+1	; 0x01
    24d0:	9d 01       	movw	r18, r26
    24d2:	2f 5f       	subi	r18, 0xFF	; 255
    24d4:	3f 4f       	sbci	r19, 0xFF	; 255
    24d6:	31 83       	std	Z+1, r19	; 0x01
    24d8:	20 83       	st	Z, r18
    24da:	8c 93       	st	X, r24
    24dc:	26 81       	ldd	r18, Z+6	; 0x06
    24de:	37 81       	ldd	r19, Z+7	; 0x07
    24e0:	2f 5f       	subi	r18, 0xFF	; 255
    24e2:	3f 4f       	sbci	r19, 0xFF	; 255
    24e4:	37 83       	std	Z+7, r19	; 0x07
    24e6:	26 83       	std	Z+6, r18	; 0x06
    24e8:	14 c0       	rjmp	.+40     	; 0x2512 <fputc+0x6e>
    24ea:	8b 01       	movw	r16, r22
    24ec:	ec 01       	movw	r28, r24
    24ee:	fb 01       	movw	r30, r22
    24f0:	00 84       	ldd	r0, Z+8	; 0x08
    24f2:	f1 85       	ldd	r31, Z+9	; 0x09
    24f4:	e0 2d       	mov	r30, r0
    24f6:	09 95       	icall
    24f8:	89 2b       	or	r24, r25
    24fa:	e1 f6       	brne	.-72     	; 0x24b4 <fputc+0x10>
    24fc:	d8 01       	movw	r26, r16
    24fe:	16 96       	adiw	r26, 0x06	; 6
    2500:	8d 91       	ld	r24, X+
    2502:	9c 91       	ld	r25, X
    2504:	17 97       	sbiw	r26, 0x07	; 7
    2506:	01 96       	adiw	r24, 0x01	; 1
    2508:	17 96       	adiw	r26, 0x07	; 7
    250a:	9c 93       	st	X, r25
    250c:	8e 93       	st	-X, r24
    250e:	16 97       	sbiw	r26, 0x06	; 6
    2510:	ce 01       	movw	r24, r28
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	1f 91       	pop	r17
    2518:	0f 91       	pop	r16
    251a:	08 95       	ret

0000251c <__ultoa_invert>:
    251c:	fa 01       	movw	r30, r20
    251e:	aa 27       	eor	r26, r26
    2520:	28 30       	cpi	r18, 0x08	; 8
    2522:	51 f1       	breq	.+84     	; 0x2578 <__ultoa_invert+0x5c>
    2524:	20 31       	cpi	r18, 0x10	; 16
    2526:	81 f1       	breq	.+96     	; 0x2588 <__ultoa_invert+0x6c>
    2528:	e8 94       	clt
    252a:	6f 93       	push	r22
    252c:	6e 7f       	andi	r22, 0xFE	; 254
    252e:	6e 5f       	subi	r22, 0xFE	; 254
    2530:	7f 4f       	sbci	r23, 0xFF	; 255
    2532:	8f 4f       	sbci	r24, 0xFF	; 255
    2534:	9f 4f       	sbci	r25, 0xFF	; 255
    2536:	af 4f       	sbci	r26, 0xFF	; 255
    2538:	b1 e0       	ldi	r27, 0x01	; 1
    253a:	3e d0       	rcall	.+124    	; 0x25b8 <__ultoa_invert+0x9c>
    253c:	b4 e0       	ldi	r27, 0x04	; 4
    253e:	3c d0       	rcall	.+120    	; 0x25b8 <__ultoa_invert+0x9c>
    2540:	67 0f       	add	r22, r23
    2542:	78 1f       	adc	r23, r24
    2544:	89 1f       	adc	r24, r25
    2546:	9a 1f       	adc	r25, r26
    2548:	a1 1d       	adc	r26, r1
    254a:	68 0f       	add	r22, r24
    254c:	79 1f       	adc	r23, r25
    254e:	8a 1f       	adc	r24, r26
    2550:	91 1d       	adc	r25, r1
    2552:	a1 1d       	adc	r26, r1
    2554:	6a 0f       	add	r22, r26
    2556:	71 1d       	adc	r23, r1
    2558:	81 1d       	adc	r24, r1
    255a:	91 1d       	adc	r25, r1
    255c:	a1 1d       	adc	r26, r1
    255e:	20 d0       	rcall	.+64     	; 0x25a0 <__ultoa_invert+0x84>
    2560:	09 f4       	brne	.+2      	; 0x2564 <__ultoa_invert+0x48>
    2562:	68 94       	set
    2564:	3f 91       	pop	r19
    2566:	2a e0       	ldi	r18, 0x0A	; 10
    2568:	26 9f       	mul	r18, r22
    256a:	11 24       	eor	r1, r1
    256c:	30 19       	sub	r19, r0
    256e:	30 5d       	subi	r19, 0xD0	; 208
    2570:	31 93       	st	Z+, r19
    2572:	de f6       	brtc	.-74     	; 0x252a <__ultoa_invert+0xe>
    2574:	cf 01       	movw	r24, r30
    2576:	08 95       	ret
    2578:	46 2f       	mov	r20, r22
    257a:	47 70       	andi	r20, 0x07	; 7
    257c:	40 5d       	subi	r20, 0xD0	; 208
    257e:	41 93       	st	Z+, r20
    2580:	b3 e0       	ldi	r27, 0x03	; 3
    2582:	0f d0       	rcall	.+30     	; 0x25a2 <__ultoa_invert+0x86>
    2584:	c9 f7       	brne	.-14     	; 0x2578 <__ultoa_invert+0x5c>
    2586:	f6 cf       	rjmp	.-20     	; 0x2574 <__ultoa_invert+0x58>
    2588:	46 2f       	mov	r20, r22
    258a:	4f 70       	andi	r20, 0x0F	; 15
    258c:	40 5d       	subi	r20, 0xD0	; 208
    258e:	4a 33       	cpi	r20, 0x3A	; 58
    2590:	18 f0       	brcs	.+6      	; 0x2598 <__ultoa_invert+0x7c>
    2592:	49 5d       	subi	r20, 0xD9	; 217
    2594:	31 fd       	sbrc	r19, 1
    2596:	40 52       	subi	r20, 0x20	; 32
    2598:	41 93       	st	Z+, r20
    259a:	02 d0       	rcall	.+4      	; 0x25a0 <__ultoa_invert+0x84>
    259c:	a9 f7       	brne	.-22     	; 0x2588 <__ultoa_invert+0x6c>
    259e:	ea cf       	rjmp	.-44     	; 0x2574 <__ultoa_invert+0x58>
    25a0:	b4 e0       	ldi	r27, 0x04	; 4
    25a2:	a6 95       	lsr	r26
    25a4:	97 95       	ror	r25
    25a6:	87 95       	ror	r24
    25a8:	77 95       	ror	r23
    25aa:	67 95       	ror	r22
    25ac:	ba 95       	dec	r27
    25ae:	c9 f7       	brne	.-14     	; 0x25a2 <__ultoa_invert+0x86>
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	61 05       	cpc	r22, r1
    25b4:	71 05       	cpc	r23, r1
    25b6:	08 95       	ret
    25b8:	9b 01       	movw	r18, r22
    25ba:	ac 01       	movw	r20, r24
    25bc:	0a 2e       	mov	r0, r26
    25be:	06 94       	lsr	r0
    25c0:	57 95       	ror	r21
    25c2:	47 95       	ror	r20
    25c4:	37 95       	ror	r19
    25c6:	27 95       	ror	r18
    25c8:	ba 95       	dec	r27
    25ca:	c9 f7       	brne	.-14     	; 0x25be <__ultoa_invert+0xa2>
    25cc:	62 0f       	add	r22, r18
    25ce:	73 1f       	adc	r23, r19
    25d0:	84 1f       	adc	r24, r20
    25d2:	95 1f       	adc	r25, r21
    25d4:	a0 1d       	adc	r26, r0
    25d6:	08 95       	ret

000025d8 <__prologue_saves__>:
    25d8:	2f 92       	push	r2
    25da:	3f 92       	push	r3
    25dc:	4f 92       	push	r4
    25de:	5f 92       	push	r5
    25e0:	6f 92       	push	r6
    25e2:	7f 92       	push	r7
    25e4:	8f 92       	push	r8
    25e6:	9f 92       	push	r9
    25e8:	af 92       	push	r10
    25ea:	bf 92       	push	r11
    25ec:	cf 92       	push	r12
    25ee:	df 92       	push	r13
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	ca 1b       	sub	r28, r26
    2602:	db 0b       	sbc	r29, r27
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	09 94       	ijmp

00002610 <__epilogue_restores__>:
    2610:	2a 88       	ldd	r2, Y+18	; 0x12
    2612:	39 88       	ldd	r3, Y+17	; 0x11
    2614:	48 88       	ldd	r4, Y+16	; 0x10
    2616:	5f 84       	ldd	r5, Y+15	; 0x0f
    2618:	6e 84       	ldd	r6, Y+14	; 0x0e
    261a:	7d 84       	ldd	r7, Y+13	; 0x0d
    261c:	8c 84       	ldd	r8, Y+12	; 0x0c
    261e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2620:	aa 84       	ldd	r10, Y+10	; 0x0a
    2622:	b9 84       	ldd	r11, Y+9	; 0x09
    2624:	c8 84       	ldd	r12, Y+8	; 0x08
    2626:	df 80       	ldd	r13, Y+7	; 0x07
    2628:	ee 80       	ldd	r14, Y+6	; 0x06
    262a:	fd 80       	ldd	r15, Y+5	; 0x05
    262c:	0c 81       	ldd	r16, Y+4	; 0x04
    262e:	1b 81       	ldd	r17, Y+3	; 0x03
    2630:	aa 81       	ldd	r26, Y+2	; 0x02
    2632:	b9 81       	ldd	r27, Y+1	; 0x01
    2634:	ce 0f       	add	r28, r30
    2636:	d1 1d       	adc	r29, r1
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	ed 01       	movw	r28, r26
    2644:	08 95       	ret

00002646 <_exit>:
    2646:	f8 94       	cli

00002648 <__stop_program>:
    2648:	ff cf       	rjmp	.-2      	; 0x2648 <__stop_program>
